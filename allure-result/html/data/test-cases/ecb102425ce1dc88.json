{
  "uid" : "ecb102425ce1dc88",
  "name" : "test_api_all[data0]",
  "fullName" : "test_allure#test_api_all",
  "historyId" : "3b937c286e09ada1273f7ab0f2130058",
  "time" : {
    "start" : 1663754773784,
    "stop" : 1663754773788,
    "duration" : 4
  },
  "status" : "broken",
  "statusMessage" : "SystemExit: 1",
  "statusTrace" : "data = {'CaseName(用例名称)': 'VerifyRoomUser2服务', 'ExpectedResults（期望结果）': None, 'Importance（用例级别）': None, 'Keywords（可以不填）': None, ...}\n\n    @pytest.mark.parametrize('data',excel) #装饰器进行封装用例\n    # @allure.title(excel[excelVarles.case_name])\n    @allure.feature('报告出来了吗')\n    # @pytest.mark.parametrize('relevant_dict_global',relevant_dict_global) #装饰器进行封装用例\n    def test_api_all(data):\n        global relevant_dict_global\n        # relevant_dict_global = relevant_dict_global\n        print(\"开始type(relevant_dict_global)\",type(relevant_dict_global))\n    \n        # 获取参数关联封装\n        relevant = data[excelVarles.case_relevant]\n    \n        #对请求头为空处理并添加token\n        headers=data[excelVarles.case_headers]\n    \n        if len(str(headers).split())==0:\n            pass\n        elif len(str(headers))>=0:\n            # headers['Authorization']=login_token\n            # headers=headers\n            # headers=Relevant.write_case_relevant(headers, relevant_lists)  # 是否需参数化\n            headers = Relevant.write_case_relevant2(headers, relevant_dict_global)  # 是否需参数化\n            # headers = json.loads(headers)  # 转换为字典\n            headers = eval(headers)\n    \n        #对请求参数为空进行处理\n        params=data[excelVarles.case_data]\n        if len(str(params).split())==0:\n            pass\n        elif len(str(params))>=0:\n            print(\"relevant_params_before:\", params)\n            # params=params\n            # print(\"relevant_list是\",relevant_list)\n            # params= Relevant.write_case_relevant(params, relevant_lists) #是否需参数化\n            params = Relevant.write_case_relevant2(params, relevant_dict_global)  # 是否需参数化\n            params=params.replace(\"'\",\"\\\"\")\n    \n    \n    \n        #对文件上传路径是否为空进行处理\n        if excelVarles.case_file in data:\n            files=data[excelVarles.case_file]\n            if len(str(files).split()) == 0:\n                pass\n            elif len(str(files)) >= 0:\n                # file = Relevant.write_case_relevant(files, relevant_lists)  # 是否需参数化\n                file=files\n                print(\"type(file)\",type(file))\n                print(\"file:\",file)\n    \n        else:\n            file=None\n    \n        #对ICE接口各参数判断\n        case_ip=str(data[excelVarles.case_ip])\n        case_port=str(data[excelVarles.case_port])\n        case_isMocl=str(data[excelVarles.case_isMocl])\n        case_rootservice=str(data[excelVarles.case_rootservice])\n        case_model=str(data[excelVarles.case_model])\n        case_proxyname=str(data[excelVarles.case_proxyname])\n        case_othmodel=str(data[excelVarles.case_othmodel])\n        case_modelclass=str(data[excelVarles.case_modelclass])\n        case_service=str(data[excelVarles.case_service])\n    \n        #断言封装\n        case_subin=str(data[excelVarles.case_subin])\n        case_subout=str(data[excelVarles.case_subout])\n        def result_almost_assert(res):\n            # assert case_subin in json.dumps(res.json(),ensure_ascii=False) #响应数据\n            assert case_subin in str(res) or  case_subout not in str(res)# 响应数据\n    \n        def result_almost_asserts(res):\n            case_subin_list=case_subin.strip().split(\";\")\n            case_subout_list=case_subout.strip().split(\";\")\n            for i in range(len(case_subin_list)):\n    \n            # assert case_subin in json.dumps(res.json(),ensure_ascii=False) #响应数据\n            #     print(\"断言结果：\",case_assert)\n                # pytest.assume(case_subin_list[i] in str(res) or  case_subout not in str(res))# 响应数据\n                assert case_subin_list[i] in str(res)\n            for i in range(len(case_subout_list)):\n                assert case_subout_list[i] not in str(res)\n    \n        #执行用例\n    \n        method=str(data[excelVarles.case_method]).upper()\n        # print(method)\n        url=case_ip+str(data[excelVarles.case_url])\n        datas=data[excelVarles.case_data]\n        case_name=str(data[excelVarles.case_name])\n        case_Id=data[excelVarles.case_Id]\n        logging.info(\"********正在执行{}**********\".format(case_name))\n        # print(case_name)\n        if str(method):\n            allure.title(case_name)\n            allure.attach(\"接口用例请求参数:{}\".format(params))\n            if method=='ICE':\n                print(\"type(params):\",type(params))\n                print(\"params:\",params)\n                res = ApiRequest().send_request(method=method,url=None,PaIsMoCl=int(case_isMocl),rootService=case_rootservice,ip=case_ip,port=case_port,model=case_model,\n>                                             othermodel=case_othmodel,ModelClass_name=case_modelclass,proxy_name=case_proxyname,iceservice=case_service,params=eval(params))\n\ntest_allure.py:134: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbase\\method.py:25: in send_request\n    self.res=self.request_ice(PaIsMoCl=PaIsMoCl,rootService=rootService,ip=ip,port=port,model=model,othermodel=othermodel,ModelClass_name=ModelClass_name,proxy_name=proxy_name,iceservice=iceservice,params=params)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <base.method.ApiRequest object at 0x143F9C50>, PaIsMoCl = 1\nrootService = 'roomService', ip = '47.113.118.87', port = '33001'\nmodel = 'com.fastonz.fmserver.roomMgr'\nothermodel = 'com.fastonz.fmserver.model'\nModelClass_name = 'VerifyRoomUserRequestModel2', proxy_name = 'RoomServicePrx'\niceservice = 'VerifyRoomUser2'\nparams = {'checkPwd': 0, 'roomID': 235015, 'roomPassword': '', 'terminalType': 0, ...}\n\n    def request_ice(self,PaIsMoCl=0,rootService=None,ip=None,port=0,model=None,othermodel=None,ModelClass_name=None,proxy_name=None,iceservice=None,params=None):\n        '''\n        :param :PaIsMoCl:请求接口时，参数需要调用另一个模块的类的返回值作为入参则为1；直接用*args入参，则为0\n        :param :rootService:接口模块的根文件名\n        :param :ip:服务器地址\n        :param port: 服务器端口\n        :param model: 被测服务根模块名\n        :param proxy_name: 代理的方法名\n        :param othermodel: 参数需要调用另一个模块时，另一个模块名\n        :param ModelClass_name: 参数需要调用另一个模块的类，该类名\n        :param iceservice: 被测服务名（具体）\n        :param params:被测服务参数\n        :param varname:被测服务参数名\n        :return: 打印接口返回值\n        '''\n        path=Path('./').cwd().parent.joinpath('slicepy2')\n        path_new=str(path).replace('\\\\', '\\\\\\\\')\n        sys.path.insert(0, path_new)\n        self.status=0\n        ic=None\n        try:\n            ic=Ice.initialize(sys.argv) # 初始化运行环境\n            Ip=\"%s:default -h %s -p %s\"%(str(rootService),str(ip),str(port))\n            base=ic.stringToProxy(Ip)\n            import_model=importlib.import_module(model)\n            cls=inspect.getmembers(import_model,inspect.isclass)\n            proxy=getattr(import_model,proxy_name)\n            Service=proxy.checkedCast(base)\n    \n            if not Service:\n                raise RuntimeError(\"Invalid Proxy\")\n            else:\n                if PaIsMoCl == 1:  # 请求接口时，参数需要调用另一个模块的类\n                    import_othermodel=importlib.import_module(othermodel)\n                    if isinstance(params, dict):\n                        ModelClass_params = getattr(import_othermodel, ModelClass_name)(**params)\n                    else:\n                        ModelClass_params=getattr(import_othermodel,ModelClass_name)(*params)\n                    print(\"ModelClass_params:\",ModelClass_params)\n                    res = getattr(Service, iceservice)(ModelClass_params)\n                    print(\"=================================================\")\n                elif PaIsMoCl == 0: # 请求接口时，参数不需要调用另一个模块的类，直接使用输入的参数\n                    if isinstance(params, dict):\n                        res=getattr(Service,iceservice)(**params)\n                    else:\n                        res = getattr(Service, iceservice)(*params)\n    \n                elif PaIsMoCl == 2:#请求commonService调用接口\n                    params = list(params)\n                    if len(params) == 3:\n                        byarray = bytearray(params[2], encoding='utf-8')\n                        import_othermodel = importlib.import_module(othermodel)\n                        ModelClass_params = getattr(import_othermodel, ModelClass_name)(params[0], params[1], byarray)  # 调用的类\n                        tresutlt = Service.invoke(ModelClass_params)\n                        res = tresutlt[1].result.decode('utf-8')\n                    else:\n                        res=None\n                        res = \"params is invalid\"\n                else:\n                    res=None\n                    res = \"PaIsMoCl is invalid value\"\n                return res\n    \n        except:\n            e=traceback.print_exc()\n            self.status = 1\n            logging.info(\"出现异常，异常消息：\" + str(e))\n            # return 'Fail'\n        finally:\n            if ic:\n                # Clean up\n                try:\n                    ic.destroy()\n                    print(\"--------------------------------------------------------------------------------\")\n                except:\n                    traceback.print_exc()\n                    self.status = 1\n    \n>       sys.exit(self.status)\nE       SystemExit: 1\n\nbase\\method.py:125: SystemExit",
  "flaky" : false,
  "beforeStages" : [ {
    "name" : "login_token",
    "time" : {
      "start" : 1663754773655,
      "stop" : 1663754773783,
      "duration" : 128
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "SystemExit: 1",
    "statusTrace" : "data = {'CaseName(用例名称)': 'VerifyRoomUser2服务', 'ExpectedResults（期望结果）': None, 'Importance（用例级别）': None, 'Keywords（可以不填）': None, ...}\n\n    @pytest.mark.parametrize('data',excel) #装饰器进行封装用例\n    # @allure.title(excel[excelVarles.case_name])\n    @allure.feature('报告出来了吗')\n    # @pytest.mark.parametrize('relevant_dict_global',relevant_dict_global) #装饰器进行封装用例\n    def test_api_all(data):\n        global relevant_dict_global\n        # relevant_dict_global = relevant_dict_global\n        print(\"开始type(relevant_dict_global)\",type(relevant_dict_global))\n    \n        # 获取参数关联封装\n        relevant = data[excelVarles.case_relevant]\n    \n        #对请求头为空处理并添加token\n        headers=data[excelVarles.case_headers]\n    \n        if len(str(headers).split())==0:\n            pass\n        elif len(str(headers))>=0:\n            # headers['Authorization']=login_token\n            # headers=headers\n            # headers=Relevant.write_case_relevant(headers, relevant_lists)  # 是否需参数化\n            headers = Relevant.write_case_relevant2(headers, relevant_dict_global)  # 是否需参数化\n            # headers = json.loads(headers)  # 转换为字典\n            headers = eval(headers)\n    \n        #对请求参数为空进行处理\n        params=data[excelVarles.case_data]\n        if len(str(params).split())==0:\n            pass\n        elif len(str(params))>=0:\n            print(\"relevant_params_before:\", params)\n            # params=params\n            # print(\"relevant_list是\",relevant_list)\n            # params= Relevant.write_case_relevant(params, relevant_lists) #是否需参数化\n            params = Relevant.write_case_relevant2(params, relevant_dict_global)  # 是否需参数化\n            params=params.replace(\"'\",\"\\\"\")\n    \n    \n    \n        #对文件上传路径是否为空进行处理\n        if excelVarles.case_file in data:\n            files=data[excelVarles.case_file]\n            if len(str(files).split()) == 0:\n                pass\n            elif len(str(files)) >= 0:\n                # file = Relevant.write_case_relevant(files, relevant_lists)  # 是否需参数化\n                file=files\n                print(\"type(file)\",type(file))\n                print(\"file:\",file)\n    \n        else:\n            file=None\n    \n        #对ICE接口各参数判断\n        case_ip=str(data[excelVarles.case_ip])\n        case_port=str(data[excelVarles.case_port])\n        case_isMocl=str(data[excelVarles.case_isMocl])\n        case_rootservice=str(data[excelVarles.case_rootservice])\n        case_model=str(data[excelVarles.case_model])\n        case_proxyname=str(data[excelVarles.case_proxyname])\n        case_othmodel=str(data[excelVarles.case_othmodel])\n        case_modelclass=str(data[excelVarles.case_modelclass])\n        case_service=str(data[excelVarles.case_service])\n    \n        #断言封装\n        case_subin=str(data[excelVarles.case_subin])\n        case_subout=str(data[excelVarles.case_subout])\n        def result_almost_assert(res):\n            # assert case_subin in json.dumps(res.json(),ensure_ascii=False) #响应数据\n            assert case_subin in str(res) or  case_subout not in str(res)# 响应数据\n    \n        def result_almost_asserts(res):\n            case_subin_list=case_subin.strip().split(\";\")\n            case_subout_list=case_subout.strip().split(\";\")\n            for i in range(len(case_subin_list)):\n    \n            # assert case_subin in json.dumps(res.json(),ensure_ascii=False) #响应数据\n            #     print(\"断言结果：\",case_assert)\n                # pytest.assume(case_subin_list[i] in str(res) or  case_subout not in str(res))# 响应数据\n                assert case_subin_list[i] in str(res)\n            for i in range(len(case_subout_list)):\n                assert case_subout_list[i] not in str(res)\n    \n        #执行用例\n    \n        method=str(data[excelVarles.case_method]).upper()\n        # print(method)\n        url=case_ip+str(data[excelVarles.case_url])\n        datas=data[excelVarles.case_data]\n        case_name=str(data[excelVarles.case_name])\n        case_Id=data[excelVarles.case_Id]\n        logging.info(\"********正在执行{}**********\".format(case_name))\n        # print(case_name)\n        if str(method):\n            allure.title(case_name)\n            allure.attach(\"接口用例请求参数:{}\".format(params))\n            if method=='ICE':\n                print(\"type(params):\",type(params))\n                print(\"params:\",params)\n                res = ApiRequest().send_request(method=method,url=None,PaIsMoCl=int(case_isMocl),rootService=case_rootservice,ip=case_ip,port=case_port,model=case_model,\n>                                             othermodel=case_othmodel,ModelClass_name=case_modelclass,proxy_name=case_proxyname,iceservice=case_service,params=eval(params))\n\ntest_allure.py:134: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbase\\method.py:25: in send_request\n    self.res=self.request_ice(PaIsMoCl=PaIsMoCl,rootService=rootService,ip=ip,port=port,model=model,othermodel=othermodel,ModelClass_name=ModelClass_name,proxy_name=proxy_name,iceservice=iceservice,params=params)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <base.method.ApiRequest object at 0x143F9C50>, PaIsMoCl = 1\nrootService = 'roomService', ip = '47.113.118.87', port = '33001'\nmodel = 'com.fastonz.fmserver.roomMgr'\nothermodel = 'com.fastonz.fmserver.model'\nModelClass_name = 'VerifyRoomUserRequestModel2', proxy_name = 'RoomServicePrx'\niceservice = 'VerifyRoomUser2'\nparams = {'checkPwd': 0, 'roomID': 235015, 'roomPassword': '', 'terminalType': 0, ...}\n\n    def request_ice(self,PaIsMoCl=0,rootService=None,ip=None,port=0,model=None,othermodel=None,ModelClass_name=None,proxy_name=None,iceservice=None,params=None):\n        '''\n        :param :PaIsMoCl:请求接口时，参数需要调用另一个模块的类的返回值作为入参则为1；直接用*args入参，则为0\n        :param :rootService:接口模块的根文件名\n        :param :ip:服务器地址\n        :param port: 服务器端口\n        :param model: 被测服务根模块名\n        :param proxy_name: 代理的方法名\n        :param othermodel: 参数需要调用另一个模块时，另一个模块名\n        :param ModelClass_name: 参数需要调用另一个模块的类，该类名\n        :param iceservice: 被测服务名（具体）\n        :param params:被测服务参数\n        :param varname:被测服务参数名\n        :return: 打印接口返回值\n        '''\n        path=Path('./').cwd().parent.joinpath('slicepy2')\n        path_new=str(path).replace('\\\\', '\\\\\\\\')\n        sys.path.insert(0, path_new)\n        self.status=0\n        ic=None\n        try:\n            ic=Ice.initialize(sys.argv) # 初始化运行环境\n            Ip=\"%s:default -h %s -p %s\"%(str(rootService),str(ip),str(port))\n            base=ic.stringToProxy(Ip)\n            import_model=importlib.import_module(model)\n            cls=inspect.getmembers(import_model,inspect.isclass)\n            proxy=getattr(import_model,proxy_name)\n            Service=proxy.checkedCast(base)\n    \n            if not Service:\n                raise RuntimeError(\"Invalid Proxy\")\n            else:\n                if PaIsMoCl == 1:  # 请求接口时，参数需要调用另一个模块的类\n                    import_othermodel=importlib.import_module(othermodel)\n                    if isinstance(params, dict):\n                        ModelClass_params = getattr(import_othermodel, ModelClass_name)(**params)\n                    else:\n                        ModelClass_params=getattr(import_othermodel,ModelClass_name)(*params)\n                    print(\"ModelClass_params:\",ModelClass_params)\n                    res = getattr(Service, iceservice)(ModelClass_params)\n                    print(\"=================================================\")\n                elif PaIsMoCl == 0: # 请求接口时，参数不需要调用另一个模块的类，直接使用输入的参数\n                    if isinstance(params, dict):\n                        res=getattr(Service,iceservice)(**params)\n                    else:\n                        res = getattr(Service, iceservice)(*params)\n    \n                elif PaIsMoCl == 2:#请求commonService调用接口\n                    params = list(params)\n                    if len(params) == 3:\n                        byarray = bytearray(params[2], encoding='utf-8')\n                        import_othermodel = importlib.import_module(othermodel)\n                        ModelClass_params = getattr(import_othermodel, ModelClass_name)(params[0], params[1], byarray)  # 调用的类\n                        tresutlt = Service.invoke(ModelClass_params)\n                        res = tresutlt[1].result.decode('utf-8')\n                    else:\n                        res=None\n                        res = \"params is invalid\"\n                else:\n                    res=None\n                    res = \"PaIsMoCl is invalid value\"\n                return res\n    \n        except:\n            e=traceback.print_exc()\n            self.status = 1\n            logging.info(\"出现异常，异常消息：\" + str(e))\n            # return 'Fail'\n        finally:\n            if ic:\n                # Clean up\n                try:\n                    ic.destroy()\n                    print(\"--------------------------------------------------------------------------------\")\n                except:\n                    traceback.print_exc()\n                    self.status = 1\n    \n>       sys.exit(self.status)\nE       SystemExit: 1\n\nbase\\method.py:125: SystemExit",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "cf095eeff0a1414b",
      "name" : "3ebe6a6b-21ee-4f7c-bc1f-85911e7cbf6e-attachment.attach",
      "source" : "cf095eeff0a1414b.attach",
      "type" : "text/plain",
      "size" : 119
    }, {
      "uid" : "8a58d0078643688d",
      "name" : "stdout",
      "source" : "8a58d0078643688d.txt",
      "type" : "text/plain",
      "size" : 597
    }, {
      "uid" : "723daeefc2f84cea",
      "name" : "stderr",
      "source" : "723daeefc2f84cea.txt",
      "type" : "text/plain",
      "size" : 1442
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : true,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 3
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "feature",
    "value" : "报告出来了吗"
  }, {
    "name" : "suite",
    "value" : "test_allure"
  }, {
    "name" : "host",
    "value" : "DESKTOP-N9ML3C"
  }, {
    "name" : "thread",
    "value" : "9060-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_allure"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "data",
    "value" : "{'编号': 1, 'CaseName(用例名称)': 'VerifyRoomUser2服务', 'Importance（用例级别）': None, 'Keywords（可以不填）': None, 'Preconditions（前置条件）': None, 'StepActions（步骤）': None, 'ExpectedResults（期望结果）': None, 'ip': '47.113.118.87', 'port': 33001, 'uri': \"'\", 'request_mode': 'ICE', 'headers': '{}', 'PaIsMoCl': 1, 'rootService': 'roomService', 'model': 'com.fastonz.fmserver.roomMgr', 'proxy_name': 'RoomServicePrx', 'othermodel': 'com.fastonz.fmserver.model', 'ModelClass_name': 'VerifyRoomUserRequestModel2', 'iceservice': 'VerifyRoomUser2', 'params': '{\"roomID\":235015, \"unameType\":0, \"userID\":0, \"checkPwd\":0, \"terminalType\":0,\"roomPassword\":\"\"}', 'varname': '{}', 'checkPoint_subIn': 'result = 0', 'checkPoint_subOut': '40', 'relevant': '${roomID}=[roomID]', 'automatic': 'Yes', 'testcase_result': None, 'response_data': None, 'response_time': None, 'relevant_value': None}"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "ecb102425ce1dc88.json",
  "parameterValues" : [ "{'编号': 1, 'CaseName(用例名称)': 'VerifyRoomUser2服务', 'Importance（用例级别）': None, 'Keywords（可以不填）': None, 'Preconditions（前置条件）': None, 'StepActions（步骤）': None, 'ExpectedResults（期望结果）': None, 'ip': '47.113.118.87', 'port': 33001, 'uri': \"'\", 'request_mode': 'ICE', 'headers': '{}', 'PaIsMoCl': 1, 'rootService': 'roomService', 'model': 'com.fastonz.fmserver.roomMgr', 'proxy_name': 'RoomServicePrx', 'othermodel': 'com.fastonz.fmserver.model', 'ModelClass_name': 'VerifyRoomUserRequestModel2', 'iceservice': 'VerifyRoomUser2', 'params': '{\"roomID\":235015, \"unameType\":0, \"userID\":0, \"checkPwd\":0, \"terminalType\":0,\"roomPassword\":\"\"}', 'varname': '{}', 'checkPoint_subIn': 'result = 0', 'checkPoint_subOut': '40', 'relevant': '${roomID}=[roomID]', 'automatic': 'Yes', 'testcase_result': None, 'response_data': None, 'response_time': None, 'relevant_value': None}" ]
}