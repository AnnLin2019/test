{"name": "test_api_all[data1]", "status": "broken", "statusDetails": {"message": "  File \"<string>\", line 1\n    {\"roomID\":${roomID}, \"unameType\":1, \"userID\":1459746, \"checkPwd\":0, \"terminalType\":0,\"roomPassword\":\"\"}\n              ^\nSyntaxError: invalid syntax", "trace": "data = {'CaseName(用例名称)': 'VerifyRoomUser3服务注册用户', 'ExpectedResults（期望结果）': None, 'Importance（用例级别）': None, 'Keywords（可以不填）': None, ...}\n\n    @pytest.mark.parametrize('data',excel) #装饰器进行封装用例\n    # @pytest.mark.parametrize('relevant_dict_global',relevant_dict_global) #装饰器进行封装用例\n    def test_api_all(data):\n        global relevant_dict_global\n        # relevant_dict_global = relevant_dict_global\n        print(\"开始type(relevant_dict_global)\",type(relevant_dict_global))\n    \n        # 获取参数关联封装\n        relevant = data[excelVarles.case_relevant]\n    \n        #对请求头为空处理并添加token\n        headers=data[excelVarles.case_headers]\n    \n        if len(str(headers).split())==0:\n            pass\n        elif len(str(headers))>=0:\n            # headers['Authorization']=login_token\n            # headers=headers\n            # headers=Relevant.write_case_relevant(headers, relevant_lists)  # 是否需参数化\n            headers = Relevant.write_case_relevant2(headers, relevant_dict_global)  # 是否需参数化\n            # headers = json.loads(headers)  # 转换为字典\n            headers = eval(headers)\n    \n        #对请求参数为空进行处理\n        params=data[excelVarles.case_data]\n        if len(str(params).split())==0:\n            pass\n        elif len(str(params))>=0:\n            print(\"relevant_params_before:\", params)\n            # params=params\n            # print(\"relevant_list是\",relevant_list)\n            # params= Relevant.write_case_relevant(params, relevant_lists) #是否需参数化\n            params = Relevant.write_case_relevant2(params, relevant_dict_global)  # 是否需参数化\n            params=params.replace(\"'\",\"\\\"\")\n    \n    \n    \n        #对文件上传路径是否为空进行处理\n        if excelVarles.case_file in data:\n            files=data[excelVarles.case_file]\n            if len(str(files).split()) == 0:\n                pass\n            elif len(str(files)) >= 0:\n                # file = Relevant.write_case_relevant(files, relevant_lists)  # 是否需参数化\n                file=files\n                print(\"type(file)\",type(file))\n                print(\"file:\",file)\n    \n        else:\n            file=None\n    \n        #对ICE接口各参数判断\n        case_ip=str(data[excelVarles.case_ip])\n        case_port=str(data[excelVarles.case_port])\n        case_isMocl=str(data[excelVarles.case_isMocl])\n        case_rootservice=str(data[excelVarles.case_rootservice])\n        case_model=str(data[excelVarles.case_model])\n        case_proxyname=str(data[excelVarles.case_proxyname])\n        case_othmodel=str(data[excelVarles.case_othmodel])\n        case_modelclass=str(data[excelVarles.case_modelclass])\n        case_service=str(data[excelVarles.case_service])\n    \n        #断言封装\n        case_subin=str(data[excelVarles.case_subin])\n        case_subout=str(data[excelVarles.case_subout])\n        def result_almost_assert(res):\n            # assert case_subin in json.dumps(res.json(),ensure_ascii=False) #响应数据\n            assert case_subin in str(res) or  case_subout not in str(res)# 响应数据\n    \n        def result_almost_asserts(res):\n            case_subin_list=case_subin.strip().split(\";\")\n            case_subout_list=case_subout.strip().split(\";\")\n            for i in range(len(case_subin_list)):\n    \n            # assert case_subin in json.dumps(res.json(),ensure_ascii=False) #响应数据\n            #     print(\"断言结果：\",case_assert)\n                # pytest.assume(case_subin_list[i] in str(res) or  case_subout not in str(res))# 响应数据\n                assert case_subin_list[i] in str(res)\n            for i in range(len(case_subout_list)):\n                assert case_subout_list[i] not in str(res)\n    \n        #执行用例\n    \n        method=str(data[excelVarles.case_method]).upper()\n        # print(method)\n        url=case_ip+str(data[excelVarles.case_url])\n        datas=data[excelVarles.case_data]\n        case_name=str(data[excelVarles.case_name])\n        case_Id=data[excelVarles.case_Id]\n        logging.info(\"********正在执行{}**********\".format(case_name))\n        # print(case_name)\n        if str(method):\n            if method=='ICE':\n                print(\"type(params):\",type(params))\n                print(\"params:\",params)\n                res = ApiRequest().send_request(method=method,url=None,PaIsMoCl=int(case_isMocl),rootService=case_rootservice,ip=case_ip,port=case_port,model=case_model,\n>                                             othermodel=case_othmodel,ModelClass_name=case_modelclass,proxy_name=case_proxyname,iceservice=case_service,params=eval(params))\nE                 File \"<string>\", line 1\nE                   {\"roomID\":${roomID}, \"unameType\":1, \"userID\":1459746, \"checkPwd\":0, \"terminalType\":0,\"roomPassword\":\"\"}\nE                             ^\nE               SyntaxError: invalid syntax\n\ntest_pytest\\test_api_all.py:130: SyntaxError"}, "attachments": [{"name": "stdout", "source": "ffe68cbf-37aa-429a-842b-7d49550f0f10-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "data", "value": "{'编号': 2, 'CaseName(用例名称)': 'VerifyRoomUser3服务注册用户', 'Importance（用例级别）': None, 'Keywords（可以不填）': None, 'Preconditions（前置条件）': None, 'StepActions（步骤）': None, 'ExpectedResults（期望结果）': None, 'ip': '47.113.118.87', 'port': 33001, 'uri': \"'\", 'request_mode': 'ICE', 'headers': '{}', 'PaIsMoCl': 1, 'rootService': 'roomService', 'model': 'com.fastonz.fmserver.roomMgr', 'proxy_name': 'RoomServicePrx', 'othermodel': 'com.fastonz.fmserver.model', 'ModelClass_name': 'VerifyRoomUserRequestModel2', 'iceservice': 'VerifyRoomUser3', 'params': '{\"roomID\":${roomID}, \"unameType\":1, \"userID\":1459746, \"checkPwd\":0, \"terminalType\":0,\"roomPassword\":\"\"}', 'varname': None, 'checkPoint_subIn': 'result = 0', 'checkPoint_subOut': None, 'relevant': None, 'automatic': 'Yes', 'testcase_result': None, 'response_data': None, 'response_time': None, 'relevant_value': None}"}], "start": 1663747705028, "stop": 1663747705031, "uuid": "bf62f71f-c7ed-4814-8491-9ce0576eed6a", "historyId": "2e6ada17e3816b19be551ec137fd64e0", "testCaseId": "46b2f3a6fe425d95c0fa66ec9e2c5879", "fullName": "test_pytest.test_api_all#test_api_all", "labels": [{"name": "parentSuite", "value": "test_pytest"}, {"name": "suite", "value": "test_api_all"}, {"name": "host", "value": "DESKTOP-N9ML3C"}, {"name": "thread", "value": "16468-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_pytest.test_api_all"}]}