# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.5
#
# <auto-generated>
#
# Generated from file `AppCertifyService.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy
import AppCertifyModel_ice

# Included module com
_M_com = Ice.openModule('com')

# Included module com.fastonz
_M_com.fastonz = Ice.openModule('com.fastonz')

# Included module com.fastonz.live
_M_com.fastonz.live = Ice.openModule('com.fastonz.live')

# Included module com.fastonz.live.sliceprotocol
_M_com.fastonz.live.sliceprotocol = Ice.openModule('com.fastonz.live.sliceprotocol')

# Included module com.fastonz.live.sliceprotocol.model
_M_com.fastonz.live.sliceprotocol.model = Ice.openModule('com.fastonz.live.sliceprotocol.model')

# Start of module com
__name__ = 'com'

# Start of module com.fastonz
__name__ = 'com.fastonz'

# Start of module com.fastonz.live
__name__ = 'com.fastonz.live'

# Start of module com.fastonz.live.sliceprotocol
__name__ = 'com.fastonz.live.sliceprotocol'

# Start of module com.fastonz.live.sliceprotocol.controller
_M_com.fastonz.live.sliceprotocol.controller = Ice.openModule('com.fastonz.live.sliceprotocol.controller')
__name__ = 'com.fastonz.live.sliceprotocol.controller'

_M_com.fastonz.live.sliceprotocol.controller._t_AppCertifyService = IcePy.defineValue('::com::fastonz::live::sliceprotocol::controller::AppCertifyService', Ice.Value, -1, (), False, True, None, ())

if 'AppCertifyServicePrx' not in _M_com.fastonz.live.sliceprotocol.controller.__dict__:
    _M_com.fastonz.live.sliceprotocol.controller.AppCertifyServicePrx = Ice.createTempClass()
    class AppCertifyServicePrx(Ice.ObjectPrx):

        def appCertify(self, appCertifyModel, context=None):
            return _M_com.fastonz.live.sliceprotocol.controller.AppCertifyService._op_appCertify.invoke(self, ((appCertifyModel, ), context))

        def appCertifyAsync(self, appCertifyModel, context=None):
            return _M_com.fastonz.live.sliceprotocol.controller.AppCertifyService._op_appCertify.invokeAsync(self, ((appCertifyModel, ), context))

        def begin_appCertify(self, appCertifyModel, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.fastonz.live.sliceprotocol.controller.AppCertifyService._op_appCertify.begin(self, ((appCertifyModel, ), _response, _ex, _sent, context))

        def end_appCertify(self, _r):
            return _M_com.fastonz.live.sliceprotocol.controller.AppCertifyService._op_appCertify.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_com.fastonz.live.sliceprotocol.controller.AppCertifyServicePrx.ice_checkedCast(proxy, '::com::fastonz::live::sliceprotocol::controller::AppCertifyService', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_com.fastonz.live.sliceprotocol.controller.AppCertifyServicePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::com::fastonz::live::sliceprotocol::controller::AppCertifyService'
    _M_com.fastonz.live.sliceprotocol.controller._t_AppCertifyServicePrx = IcePy.defineProxy('::com::fastonz::live::sliceprotocol::controller::AppCertifyService', AppCertifyServicePrx)

    _M_com.fastonz.live.sliceprotocol.controller.AppCertifyServicePrx = AppCertifyServicePrx
    del AppCertifyServicePrx

    _M_com.fastonz.live.sliceprotocol.controller.AppCertifyService = Ice.createTempClass()
    class AppCertifyService(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::com::fastonz::live::sliceprotocol::controller::AppCertifyService')

        def ice_id(self, current=None):
            return '::com::fastonz::live::sliceprotocol::controller::AppCertifyService'

        @staticmethod
        def ice_staticId():
            return '::com::fastonz::live::sliceprotocol::controller::AppCertifyService'

        def appCertify(self, appCertifyModel, current=None):
            raise NotImplementedError("servant method 'appCertify' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_com.fastonz.live.sliceprotocol.controller._t_AppCertifyServiceDisp)

        __repr__ = __str__

    _M_com.fastonz.live.sliceprotocol.controller._t_AppCertifyServiceDisp = IcePy.defineClass('::com::fastonz::live::sliceprotocol::controller::AppCertifyService', AppCertifyService, (), None, ())
    AppCertifyService._ice_type = _M_com.fastonz.live.sliceprotocol.controller._t_AppCertifyServiceDisp

    AppCertifyService._op_appCertify = IcePy.Operation('appCertify', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, None, (), (((), _M_com.fastonz.live.sliceprotocol.model._t_AppCertifyModel, False, 0),), (), ((), IcePy._t_int, False, 0), ())

    _M_com.fastonz.live.sliceprotocol.controller.AppCertifyService = AppCertifyService
    del AppCertifyService

# End of module com.fastonz.live.sliceprotocol.controller

__name__ = 'com.fastonz.live.sliceprotocol'

# End of module com.fastonz.live.sliceprotocol

__name__ = 'com.fastonz.live'

# End of module com.fastonz.live

__name__ = 'com.fastonz'

# End of module com.fastonz

__name__ = 'com'

# End of module com
