# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.5
#
# <auto-generated>
#
# Generated from file `ChatRecordModel.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module com
_M_com = Ice.openModule('com')
__name__ = 'com'

# Start of module com.fastonz
_M_com.fastonz = Ice.openModule('com.fastonz')
__name__ = 'com.fastonz'

# Start of module com.fastonz.live
_M_com.fastonz.live = Ice.openModule('com.fastonz.live')
__name__ = 'com.fastonz.live'

# Start of module com.fastonz.live.sliceprotocol
_M_com.fastonz.live.sliceprotocol = Ice.openModule('com.fastonz.live.sliceprotocol')
__name__ = 'com.fastonz.live.sliceprotocol'

# Start of module com.fastonz.live.sliceprotocol.model
_M_com.fastonz.live.sliceprotocol.model = Ice.openModule('com.fastonz.live.sliceprotocol.model')
__name__ = 'com.fastonz.live.sliceprotocol.model'

if 'ChatRecordModel' not in _M_com.fastonz.live.sliceprotocol.model.__dict__:
    _M_com.fastonz.live.sliceprotocol.model.ChatRecordModel = Ice.createTempClass()
    class ChatRecordModel(object):
        def __init__(self, liveRoomId=0, messageId='', userId='', username='', nickname='', avatar='', userType=0, status=0, context='', type=0, sendTime=''):
            self.liveRoomId = liveRoomId
            self.messageId = messageId
            self.userId = userId
            self.username = username
            self.nickname = nickname
            self.avatar = avatar
            self.userType = userType
            self.status = status
            self.context = context
            self.type = type
            self.sendTime = sendTime

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.liveRoomId)
            _h = 5 * _h + Ice.getHash(self.messageId)
            _h = 5 * _h + Ice.getHash(self.userId)
            _h = 5 * _h + Ice.getHash(self.username)
            _h = 5 * _h + Ice.getHash(self.nickname)
            _h = 5 * _h + Ice.getHash(self.avatar)
            _h = 5 * _h + Ice.getHash(self.userType)
            _h = 5 * _h + Ice.getHash(self.status)
            _h = 5 * _h + Ice.getHash(self.context)
            _h = 5 * _h + Ice.getHash(self.type)
            _h = 5 * _h + Ice.getHash(self.sendTime)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_com.fastonz.live.sliceprotocol.model.ChatRecordModel):
                return NotImplemented
            else:
                if self.liveRoomId is None or other.liveRoomId is None:
                    if self.liveRoomId != other.liveRoomId:
                        return (-1 if self.liveRoomId is None else 1)
                else:
                    if self.liveRoomId < other.liveRoomId:
                        return -1
                    elif self.liveRoomId > other.liveRoomId:
                        return 1
                if self.messageId is None or other.messageId is None:
                    if self.messageId != other.messageId:
                        return (-1 if self.messageId is None else 1)
                else:
                    if self.messageId < other.messageId:
                        return -1
                    elif self.messageId > other.messageId:
                        return 1
                if self.userId is None or other.userId is None:
                    if self.userId != other.userId:
                        return (-1 if self.userId is None else 1)
                else:
                    if self.userId < other.userId:
                        return -1
                    elif self.userId > other.userId:
                        return 1
                if self.username is None or other.username is None:
                    if self.username != other.username:
                        return (-1 if self.username is None else 1)
                else:
                    if self.username < other.username:
                        return -1
                    elif self.username > other.username:
                        return 1
                if self.nickname is None or other.nickname is None:
                    if self.nickname != other.nickname:
                        return (-1 if self.nickname is None else 1)
                else:
                    if self.nickname < other.nickname:
                        return -1
                    elif self.nickname > other.nickname:
                        return 1
                if self.avatar is None or other.avatar is None:
                    if self.avatar != other.avatar:
                        return (-1 if self.avatar is None else 1)
                else:
                    if self.avatar < other.avatar:
                        return -1
                    elif self.avatar > other.avatar:
                        return 1
                if self.userType is None or other.userType is None:
                    if self.userType != other.userType:
                        return (-1 if self.userType is None else 1)
                else:
                    if self.userType < other.userType:
                        return -1
                    elif self.userType > other.userType:
                        return 1
                if self.status is None or other.status is None:
                    if self.status != other.status:
                        return (-1 if self.status is None else 1)
                else:
                    if self.status < other.status:
                        return -1
                    elif self.status > other.status:
                        return 1
                if self.context is None or other.context is None:
                    if self.context != other.context:
                        return (-1 if self.context is None else 1)
                else:
                    if self.context < other.context:
                        return -1
                    elif self.context > other.context:
                        return 1
                if self.type is None or other.type is None:
                    if self.type != other.type:
                        return (-1 if self.type is None else 1)
                else:
                    if self.type < other.type:
                        return -1
                    elif self.type > other.type:
                        return 1
                if self.sendTime is None or other.sendTime is None:
                    if self.sendTime != other.sendTime:
                        return (-1 if self.sendTime is None else 1)
                else:
                    if self.sendTime < other.sendTime:
                        return -1
                    elif self.sendTime > other.sendTime:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_com.fastonz.live.sliceprotocol.model._t_ChatRecordModel)

        __repr__ = __str__

    _M_com.fastonz.live.sliceprotocol.model._t_ChatRecordModel = IcePy.defineStruct('::com::fastonz::live::sliceprotocol::model::ChatRecordModel', ChatRecordModel, (), (
        ('liveRoomId', (), IcePy._t_int),
        ('messageId', (), IcePy._t_string),
        ('userId', (), IcePy._t_string),
        ('username', (), IcePy._t_string),
        ('nickname', (), IcePy._t_string),
        ('avatar', (), IcePy._t_string),
        ('userType', (), IcePy._t_int),
        ('status', (), IcePy._t_int),
        ('context', (), IcePy._t_string),
        ('type', (), IcePy._t_int),
        ('sendTime', (), IcePy._t_string)
    ))

    _M_com.fastonz.live.sliceprotocol.model.ChatRecordModel = ChatRecordModel
    del ChatRecordModel

# End of module com.fastonz.live.sliceprotocol.model

__name__ = 'com.fastonz.live.sliceprotocol'

# End of module com.fastonz.live.sliceprotocol

__name__ = 'com.fastonz.live'

# End of module com.fastonz.live

__name__ = 'com.fastonz'

# End of module com.fastonz

__name__ = 'com'

# End of module com
