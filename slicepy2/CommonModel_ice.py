# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.5
#
# <auto-generated>
#
# Generated from file `CommonModel.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module com
_M_com = Ice.openModule('com')
__name__ = 'com'

# Start of module com.hst
_M_com.hst = Ice.openModule('com.hst')
__name__ = 'com.hst'

# Start of module com.hst.boss
_M_com.hst.boss = Ice.openModule('com.hst.boss')
__name__ = 'com.hst.boss'

# Start of module com.hst.boss.model
_M_com.hst.boss.model = Ice.openModule('com.hst.boss.model')
__name__ = 'com.hst.boss.model'

if '_t_byteArray' not in _M_com.hst.boss.model.__dict__:
    _M_com.hst.boss.model._t_byteArray = IcePy.defineSequence('::com::hst::boss::model::byteArray', (), IcePy._t_byte)

if 'Response' not in _M_com.hst.boss.model.__dict__:
    _M_com.hst.boss.model.Response = Ice.createTempClass()
    class Response(object):
        def __init__(self, resultCode=0, result=None):
            self.resultCode = resultCode
            self.result = result

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.resultCode)
            if self.result:
                for _i0 in self.result:
                    _h = 5 * _h + Ice.getHash(_i0)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_com.hst.boss.model.Response):
                return NotImplemented
            else:
                if self.resultCode is None or other.resultCode is None:
                    if self.resultCode != other.resultCode:
                        return (-1 if self.resultCode is None else 1)
                else:
                    if self.resultCode < other.resultCode:
                        return -1
                    elif self.resultCode > other.resultCode:
                        return 1
                if self.result is None or other.result is None:
                    if self.result != other.result:
                        return (-1 if self.result is None else 1)
                else:
                    if self.result < other.result:
                        return -1
                    elif self.result > other.result:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_com.hst.boss.model._t_Response)

        __repr__ = __str__

    _M_com.hst.boss.model._t_Response = IcePy.defineStruct('::com::hst::boss::model::Response', Response, (), (
        ('resultCode', (), IcePy._t_int),
        ('result', (), _M_com.hst.boss.model._t_byteArray)
    ))

    _M_com.hst.boss.model.Response = Response
    del Response

if 'Request' not in _M_com.hst.boss.model.__dict__:
    _M_com.hst.boss.model.Request = Ice.createTempClass()
    class Request(object):
        def __init__(self, className='', method='', params=None):
            self.className = className
            self.method = method
            self.params = params

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.className)
            _h = 5 * _h + Ice.getHash(self.method)
            if self.params:
                for _i0 in self.params:
                    _h = 5 * _h + Ice.getHash(_i0)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_com.hst.boss.model.Request):
                return NotImplemented
            else:
                if self.className is None or other.className is None:
                    if self.className != other.className:
                        return (-1 if self.className is None else 1)
                else:
                    if self.className < other.className:
                        return -1
                    elif self.className > other.className:
                        return 1
                if self.method is None or other.method is None:
                    if self.method != other.method:
                        return (-1 if self.method is None else 1)
                else:
                    if self.method < other.method:
                        return -1
                    elif self.method > other.method:
                        return 1
                if self.params is None or other.params is None:
                    if self.params != other.params:
                        return (-1 if self.params is None else 1)
                else:
                    if self.params < other.params:
                        return -1
                    elif self.params > other.params:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_com.hst.boss.model._t_Request)

        __repr__ = __str__

    _M_com.hst.boss.model._t_Request = IcePy.defineStruct('::com::hst::boss::model::Request', Request, (), (
        ('className', (), IcePy._t_string),
        ('method', (), IcePy._t_string),
        ('params', (), _M_com.hst.boss.model._t_byteArray)
    ))

    _M_com.hst.boss.model.Request = Request
    del Request

# End of module com.hst.boss.model

__name__ = 'com.hst.boss'

# End of module com.hst.boss

__name__ = 'com.hst'

# End of module com.hst

__name__ = 'com'

# End of module com
