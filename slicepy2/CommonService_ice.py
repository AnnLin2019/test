# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.5
#
# <auto-generated>
#
# Generated from file `CommonService.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy
import CommonModel_ice
# from slicepy2 import CommonModel_ice

# Included module com
_M_com = Ice.openModule('com')

# Included module com.hst
_M_com.hst = Ice.openModule('com.hst')

# Included module com.hst.boss
_M_com.hst.boss = Ice.openModule('com.hst.boss')

# Included module com.hst.boss.model
_M_com.hst.boss.model = Ice.openModule('com.hst.boss.model')

# Start of module com
__name__ = 'com'

# Start of module com.hst
__name__ = 'com.hst'

# Start of module com.hst.boss
__name__ = 'com.hst.boss'

# Start of module com.hst.boss.service
_M_com.hst.boss.service = Ice.openModule('com.hst.boss.service')
__name__ = 'com.hst.boss.service'

# Start of module com.hst.boss.service.common
_M_com.hst.boss.service.common = Ice.openModule('com.hst.boss.service.common')
__name__ = 'com.hst.boss.service.common'

_M_com.hst.boss.service.common._t_CommonService = IcePy.defineValue('::com::hst::boss::service::common::CommonService', Ice.Value, -1, (), False, True, None, ())

if 'CommonServicePrx' not in _M_com.hst.boss.service.common.__dict__:
    _M_com.hst.boss.service.common.CommonServicePrx = Ice.createTempClass()
    class CommonServicePrx(Ice.ObjectPrx):

        def invoke(self, Request, context=None):
            return _M_com.hst.boss.service.common.CommonService._op_invoke.invoke(self, ((Request, ), context))

        def invokeAsync(self, Request, context=None):
            return _M_com.hst.boss.service.common.CommonService._op_invoke.invokeAsync(self, ((Request, ), context))

        def begin_invoke(self, Request, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.hst.boss.service.common.CommonService._op_invoke.begin(self, ((Request, ), _response, _ex, _sent, context))

        def end_invoke(self, _r):
            return _M_com.hst.boss.service.common.CommonService._op_invoke.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_com.hst.boss.service.common.CommonServicePrx.ice_checkedCast(proxy, '::com::hst::boss::service::common::CommonService', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_com.hst.boss.service.common.CommonServicePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::com::hst::boss::service::common::CommonService'
    _M_com.hst.boss.service.common._t_CommonServicePrx = IcePy.defineProxy('::com::hst::boss::service::common::CommonService', CommonServicePrx)

    _M_com.hst.boss.service.common.CommonServicePrx = CommonServicePrx
    del CommonServicePrx

    _M_com.hst.boss.service.common.CommonService = Ice.createTempClass()
    class CommonService(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::com::hst::boss::service::common::CommonService')

        def ice_id(self, current=None):
            return '::com::hst::boss::service::common::CommonService'

        @staticmethod
        def ice_staticId():
            return '::com::hst::boss::service::common::CommonService'

        def invoke(self, Request, current=None):
            raise NotImplementedError("servant method 'invoke' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_com.hst.boss.service.common._t_CommonServiceDisp)

        __repr__ = __str__

    _M_com.hst.boss.service.common._t_CommonServiceDisp = IcePy.defineClass('::com::hst::boss::service::common::CommonService', CommonService, (), None, ())
    CommonService._ice_type = _M_com.hst.boss.service.common._t_CommonServiceDisp

    CommonService._op_invoke = IcePy.Operation('invoke', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, None, (), (((), _M_com.hst.boss.model._t_Request, False, 0),), (((), _M_com.hst.boss.model._t_Response, False, 0),), ((), IcePy._t_int, False, 0), ())

    _M_com.hst.boss.service.common.CommonService = CommonService
    del CommonService

# End of module com.hst.boss.service.common

__name__ = 'com.hst.boss.service'

# End of module com.hst.boss.service

__name__ = 'com.hst.boss'

# End of module com.hst.boss

__name__ = 'com.hst'

# End of module com.hst

__name__ = 'com'

# End of module com
