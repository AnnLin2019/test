# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.5
#
# <auto-generated>
#
# Generated from file `CompanyService.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy
import CompanyLicenseCountModel_ice
import CompanyBalanceModel_ice
import CompanyRemainCallCountModel_ice
import ProServiceModel_ice
import ProServiceModel2_ice
import ProductFunctionModel_ice

# Included module com
_M_com = Ice.openModule('com')

# Included module com.fastonz
_M_com.fastonz = Ice.openModule('com.fastonz')

# Included module com.fastonz.fmserver
_M_com.fastonz.fmserver = Ice.openModule('com.fastonz.fmserver')

# Included module com.fastonz.fmserver.model
_M_com.fastonz.fmserver.model = Ice.openModule('com.fastonz.fmserver.model')

# Start of module com
__name__ = 'com'

# Start of module com.fastonz
__name__ = 'com.fastonz'

# Start of module com.fastonz.fmserver
__name__ = 'com.fastonz.fmserver'

# Start of module com.fastonz.fmserver.companyMgr
_M_com.fastonz.fmserver.companyMgr = Ice.openModule('com.fastonz.fmserver.companyMgr')
__name__ = 'com.fastonz.fmserver.companyMgr'

_M_com.fastonz.fmserver.companyMgr._t_CompanyService = IcePy.defineValue('::com::fastonz::fmserver::companyMgr::CompanyService', Ice.Value, -1, (), False, True, None, ())

if 'CompanyServicePrx' not in _M_com.fastonz.fmserver.companyMgr.__dict__:
    _M_com.fastonz.fmserver.companyMgr.CompanyServicePrx = Ice.createTempClass()
    class CompanyServicePrx(Ice.ObjectPrx):

        def IntenalGetCompanyLicenseCount(self, companyID, servicesID, context=None):
            return _M_com.fastonz.fmserver.companyMgr.CompanyService._op_IntenalGetCompanyLicenseCount.invoke(self, ((companyID, servicesID), context))

        def IntenalGetCompanyLicenseCountAsync(self, companyID, servicesID, context=None):
            return _M_com.fastonz.fmserver.companyMgr.CompanyService._op_IntenalGetCompanyLicenseCount.invokeAsync(self, ((companyID, servicesID), context))

        def begin_IntenalGetCompanyLicenseCount(self, companyID, servicesID, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.fastonz.fmserver.companyMgr.CompanyService._op_IntenalGetCompanyLicenseCount.begin(self, ((companyID, servicesID), _response, _ex, _sent, context))

        def end_IntenalGetCompanyLicenseCount(self, _r):
            return _M_com.fastonz.fmserver.companyMgr.CompanyService._op_IntenalGetCompanyLicenseCount.end(self, _r)

        def GetCompanyBalance(self, userID, context=None):
            return _M_com.fastonz.fmserver.companyMgr.CompanyService._op_GetCompanyBalance.invoke(self, ((userID, ), context))

        def GetCompanyBalanceAsync(self, userID, context=None):
            return _M_com.fastonz.fmserver.companyMgr.CompanyService._op_GetCompanyBalance.invokeAsync(self, ((userID, ), context))

        def begin_GetCompanyBalance(self, userID, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.fastonz.fmserver.companyMgr.CompanyService._op_GetCompanyBalance.begin(self, ((userID, ), _response, _ex, _sent, context))

        def end_GetCompanyBalance(self, _r):
            return _M_com.fastonz.fmserver.companyMgr.CompanyService._op_GetCompanyBalance.end(self, _r)

        def GetCompanyLicenseCount(self, companyID, servicesID, context=None):
            return _M_com.fastonz.fmserver.companyMgr.CompanyService._op_GetCompanyLicenseCount.invoke(self, ((companyID, servicesID), context))

        def GetCompanyLicenseCountAsync(self, companyID, servicesID, context=None):
            return _M_com.fastonz.fmserver.companyMgr.CompanyService._op_GetCompanyLicenseCount.invokeAsync(self, ((companyID, servicesID), context))

        def begin_GetCompanyLicenseCount(self, companyID, servicesID, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.fastonz.fmserver.companyMgr.CompanyService._op_GetCompanyLicenseCount.begin(self, ((companyID, servicesID), _response, _ex, _sent, context))

        def end_GetCompanyLicenseCount(self, _r):
            return _M_com.fastonz.fmserver.companyMgr.CompanyService._op_GetCompanyLicenseCount.end(self, _r)

        def GetCompanyRemainCallCount(self, userID, context=None):
            return _M_com.fastonz.fmserver.companyMgr.CompanyService._op_GetCompanyRemainCallCount.invoke(self, ((userID, ), context))

        def GetCompanyRemainCallCountAsync(self, userID, context=None):
            return _M_com.fastonz.fmserver.companyMgr.CompanyService._op_GetCompanyRemainCallCount.invokeAsync(self, ((userID, ), context))

        def begin_GetCompanyRemainCallCount(self, userID, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.fastonz.fmserver.companyMgr.CompanyService._op_GetCompanyRemainCallCount.begin(self, ((userID, ), _response, _ex, _sent, context))

        def end_GetCompanyRemainCallCount(self, _r):
            return _M_com.fastonz.fmserver.companyMgr.CompanyService._op_GetCompanyRemainCallCount.end(self, _r)

        def CheckOrgClosed(self, companyID, context=None):
            return _M_com.fastonz.fmserver.companyMgr.CompanyService._op_CheckOrgClosed.invoke(self, ((companyID, ), context))

        def CheckOrgClosedAsync(self, companyID, context=None):
            return _M_com.fastonz.fmserver.companyMgr.CompanyService._op_CheckOrgClosed.invokeAsync(self, ((companyID, ), context))

        def begin_CheckOrgClosed(self, companyID, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.fastonz.fmserver.companyMgr.CompanyService._op_CheckOrgClosed.begin(self, ((companyID, ), _response, _ex, _sent, context))

        def end_CheckOrgClosed(self, _r):
            return _M_com.fastonz.fmserver.companyMgr.CompanyService._op_CheckOrgClosed.end(self, _r)

        def GetCompanyBusiness(self, proServicesID, context=None):
            return _M_com.fastonz.fmserver.companyMgr.CompanyService._op_GetCompanyBusiness.invoke(self, ((proServicesID, ), context))

        def GetCompanyBusinessAsync(self, proServicesID, context=None):
            return _M_com.fastonz.fmserver.companyMgr.CompanyService._op_GetCompanyBusiness.invokeAsync(self, ((proServicesID, ), context))

        def begin_GetCompanyBusiness(self, proServicesID, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.fastonz.fmserver.companyMgr.CompanyService._op_GetCompanyBusiness.begin(self, ((proServicesID, ), _response, _ex, _sent, context))

        def end_GetCompanyBusiness(self, _r):
            return _M_com.fastonz.fmserver.companyMgr.CompanyService._op_GetCompanyBusiness.end(self, _r)

        def GetCompanyBusiness2(self, proServicesID, context=None):
            return _M_com.fastonz.fmserver.companyMgr.CompanyService._op_GetCompanyBusiness2.invoke(self, ((proServicesID, ), context))

        def GetCompanyBusiness2Async(self, proServicesID, context=None):
            return _M_com.fastonz.fmserver.companyMgr.CompanyService._op_GetCompanyBusiness2.invokeAsync(self, ((proServicesID, ), context))

        def begin_GetCompanyBusiness2(self, proServicesID, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.fastonz.fmserver.companyMgr.CompanyService._op_GetCompanyBusiness2.begin(self, ((proServicesID, ), _response, _ex, _sent, context))

        def end_GetCompanyBusiness2(self, _r):
            return _M_com.fastonz.fmserver.companyMgr.CompanyService._op_GetCompanyBusiness2.end(self, _r)

        def GetProductFunctions(self, proServicesID, roomId, context=None):
            return _M_com.fastonz.fmserver.companyMgr.CompanyService._op_GetProductFunctions.invoke(self, ((proServicesID, roomId), context))

        def GetProductFunctionsAsync(self, proServicesID, roomId, context=None):
            return _M_com.fastonz.fmserver.companyMgr.CompanyService._op_GetProductFunctions.invokeAsync(self, ((proServicesID, roomId), context))

        def begin_GetProductFunctions(self, proServicesID, roomId, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.fastonz.fmserver.companyMgr.CompanyService._op_GetProductFunctions.begin(self, ((proServicesID, roomId), _response, _ex, _sent, context))

        def end_GetProductFunctions(self, _r):
            return _M_com.fastonz.fmserver.companyMgr.CompanyService._op_GetProductFunctions.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_com.fastonz.fmserver.companyMgr.CompanyServicePrx.ice_checkedCast(proxy, '::com::fastonz::fmserver::companyMgr::CompanyService', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_com.fastonz.fmserver.companyMgr.CompanyServicePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::com::fastonz::fmserver::companyMgr::CompanyService'
    _M_com.fastonz.fmserver.companyMgr._t_CompanyServicePrx = IcePy.defineProxy('::com::fastonz::fmserver::companyMgr::CompanyService', CompanyServicePrx)

    _M_com.fastonz.fmserver.companyMgr.CompanyServicePrx = CompanyServicePrx
    del CompanyServicePrx

    _M_com.fastonz.fmserver.companyMgr.CompanyService = Ice.createTempClass()
    class CompanyService(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::com::fastonz::fmserver::companyMgr::CompanyService')

        def ice_id(self, current=None):
            return '::com::fastonz::fmserver::companyMgr::CompanyService'

        @staticmethod
        def ice_staticId():
            return '::com::fastonz::fmserver::companyMgr::CompanyService'

        def IntenalGetCompanyLicenseCount(self, companyID, servicesID, current=None):
            raise NotImplementedError("servant method 'IntenalGetCompanyLicenseCount' not implemented")

        def GetCompanyBalance(self, userID, current=None):
            raise NotImplementedError("servant method 'GetCompanyBalance' not implemented")

        def GetCompanyLicenseCount(self, companyID, servicesID, current=None):
            raise NotImplementedError("servant method 'GetCompanyLicenseCount' not implemented")

        def GetCompanyRemainCallCount(self, userID, current=None):
            raise NotImplementedError("servant method 'GetCompanyRemainCallCount' not implemented")

        def CheckOrgClosed(self, companyID, current=None):
            raise NotImplementedError("servant method 'CheckOrgClosed' not implemented")

        def GetCompanyBusiness(self, proServicesID, current=None):
            raise NotImplementedError("servant method 'GetCompanyBusiness' not implemented")

        def GetCompanyBusiness2(self, proServicesID, current=None):
            raise NotImplementedError("servant method 'GetCompanyBusiness2' not implemented")

        def GetProductFunctions(self, proServicesID, roomId, current=None):
            raise NotImplementedError("servant method 'GetProductFunctions' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_com.fastonz.fmserver.companyMgr._t_CompanyServiceDisp)

        __repr__ = __str__

    _M_com.fastonz.fmserver.companyMgr._t_CompanyServiceDisp = IcePy.defineClass('::com::fastonz::fmserver::companyMgr::CompanyService', CompanyService, (), None, ())
    CompanyService._ice_type = _M_com.fastonz.fmserver.companyMgr._t_CompanyServiceDisp

    CompanyService._op_IntenalGetCompanyLicenseCount = IcePy.Operation('IntenalGetCompanyLicenseCount', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (((), _M_com.fastonz.fmserver.model._t_CompanyLicenseCountModel, False, 0),), ((), IcePy._t_int, False, 0), ())
    CompanyService._op_GetCompanyBalance = IcePy.Operation('GetCompanyBalance', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, None, (), (((), IcePy._t_int, False, 0),), (((), _M_com.fastonz.fmserver.model._t_CompanyBalanceModel, False, 0),), ((), IcePy._t_int, False, 0), ())
    CompanyService._op_GetCompanyLicenseCount = IcePy.Operation('GetCompanyLicenseCount', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (((), _M_com.fastonz.fmserver.model._t_CompanyLicenseCountModel, False, 0),), ((), IcePy._t_int, False, 0), ())
    CompanyService._op_GetCompanyRemainCallCount = IcePy.Operation('GetCompanyRemainCallCount', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, None, (), (((), IcePy._t_int, False, 0),), (((), _M_com.fastonz.fmserver.model._t_CompanyRemainCallCountModel, False, 0),), ((), IcePy._t_int, False, 0), ())
    CompanyService._op_CheckOrgClosed = IcePy.Operation('CheckOrgClosed', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, None, (), (((), IcePy._t_int, False, 0),), (((), IcePy._t_int, False, 0),), ((), IcePy._t_int, False, 0), ())
    CompanyService._op_GetCompanyBusiness = IcePy.Operation('GetCompanyBusiness', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, None, (), (((), IcePy._t_int, False, 0),), (((), _M_com.fastonz.fmserver.model._t_ProServiceModel, False, 0),), ((), IcePy._t_int, False, 0), ())
    CompanyService._op_GetCompanyBusiness2 = IcePy.Operation('GetCompanyBusiness2', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, None, (), (((), IcePy._t_int, False, 0),), (((), _M_com.fastonz.fmserver.model._t_ProServiceModel2, False, 0),), ((), IcePy._t_int, False, 0), ())
    CompanyService._op_GetProductFunctions = IcePy.Operation('GetProductFunctions', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (((), _M_com.fastonz.fmserver.model._t_ProductFunctionModel, False, 0),), ((), IcePy._t_int, False, 0), ())

    _M_com.fastonz.fmserver.companyMgr.CompanyService = CompanyService
    del CompanyService

# End of module com.fastonz.fmserver.companyMgr

__name__ = 'com.fastonz.fmserver'

# End of module com.fastonz.fmserver

__name__ = 'com.fastonz'

# End of module com.fastonz

__name__ = 'com'

# End of module com
