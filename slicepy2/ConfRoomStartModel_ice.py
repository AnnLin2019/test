# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.5
#
# <auto-generated>
#
# Generated from file `ConfRoomStartModel.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module com
_M_com = Ice.openModule('com')
__name__ = 'com'

# Start of module com.fastonz
_M_com.fastonz = Ice.openModule('com.fastonz')
__name__ = 'com.fastonz'

# Start of module com.fastonz.fmserver
_M_com.fastonz.fmserver = Ice.openModule('com.fastonz.fmserver')
__name__ = 'com.fastonz.fmserver'

# Start of module com.fastonz.fmserver.model
_M_com.fastonz.fmserver.model = Ice.openModule('com.fastonz.fmserver.model')
__name__ = 'com.fastonz.fmserver.model'

if 'ConfRoomStartModel' not in _M_com.fastonz.fmserver.model.__dict__:
    _M_com.fastonz.fmserver.model.ConfRoomStartModel = Ice.createTempClass()
    class ConfRoomStartModel(object):
        def __init__(self, roomName='', maxUserCount=0, defaultMode='', useDefaultFlag=0, defaultVideoCodec='', defaultVideoWind='', defaultVideoQOS='', defaultVideoBitrate=0, defaultVideoQuality=0, enableUserList=0, result=0):
            self.roomName = roomName
            self.maxUserCount = maxUserCount
            self.defaultMode = defaultMode
            self.useDefaultFlag = useDefaultFlag
            self.defaultVideoCodec = defaultVideoCodec
            self.defaultVideoWind = defaultVideoWind
            self.defaultVideoQOS = defaultVideoQOS
            self.defaultVideoBitrate = defaultVideoBitrate
            self.defaultVideoQuality = defaultVideoQuality
            self.enableUserList = enableUserList
            self.result = result

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.roomName)
            _h = 5 * _h + Ice.getHash(self.maxUserCount)
            _h = 5 * _h + Ice.getHash(self.defaultMode)
            _h = 5 * _h + Ice.getHash(self.useDefaultFlag)
            _h = 5 * _h + Ice.getHash(self.defaultVideoCodec)
            _h = 5 * _h + Ice.getHash(self.defaultVideoWind)
            _h = 5 * _h + Ice.getHash(self.defaultVideoQOS)
            _h = 5 * _h + Ice.getHash(self.defaultVideoBitrate)
            _h = 5 * _h + Ice.getHash(self.defaultVideoQuality)
            _h = 5 * _h + Ice.getHash(self.enableUserList)
            _h = 5 * _h + Ice.getHash(self.result)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_com.fastonz.fmserver.model.ConfRoomStartModel):
                return NotImplemented
            else:
                if self.roomName is None or other.roomName is None:
                    if self.roomName != other.roomName:
                        return (-1 if self.roomName is None else 1)
                else:
                    if self.roomName < other.roomName:
                        return -1
                    elif self.roomName > other.roomName:
                        return 1
                if self.maxUserCount is None or other.maxUserCount is None:
                    if self.maxUserCount != other.maxUserCount:
                        return (-1 if self.maxUserCount is None else 1)
                else:
                    if self.maxUserCount < other.maxUserCount:
                        return -1
                    elif self.maxUserCount > other.maxUserCount:
                        return 1
                if self.defaultMode is None or other.defaultMode is None:
                    if self.defaultMode != other.defaultMode:
                        return (-1 if self.defaultMode is None else 1)
                else:
                    if self.defaultMode < other.defaultMode:
                        return -1
                    elif self.defaultMode > other.defaultMode:
                        return 1
                if self.useDefaultFlag is None or other.useDefaultFlag is None:
                    if self.useDefaultFlag != other.useDefaultFlag:
                        return (-1 if self.useDefaultFlag is None else 1)
                else:
                    if self.useDefaultFlag < other.useDefaultFlag:
                        return -1
                    elif self.useDefaultFlag > other.useDefaultFlag:
                        return 1
                if self.defaultVideoCodec is None or other.defaultVideoCodec is None:
                    if self.defaultVideoCodec != other.defaultVideoCodec:
                        return (-1 if self.defaultVideoCodec is None else 1)
                else:
                    if self.defaultVideoCodec < other.defaultVideoCodec:
                        return -1
                    elif self.defaultVideoCodec > other.defaultVideoCodec:
                        return 1
                if self.defaultVideoWind is None or other.defaultVideoWind is None:
                    if self.defaultVideoWind != other.defaultVideoWind:
                        return (-1 if self.defaultVideoWind is None else 1)
                else:
                    if self.defaultVideoWind < other.defaultVideoWind:
                        return -1
                    elif self.defaultVideoWind > other.defaultVideoWind:
                        return 1
                if self.defaultVideoQOS is None or other.defaultVideoQOS is None:
                    if self.defaultVideoQOS != other.defaultVideoQOS:
                        return (-1 if self.defaultVideoQOS is None else 1)
                else:
                    if self.defaultVideoQOS < other.defaultVideoQOS:
                        return -1
                    elif self.defaultVideoQOS > other.defaultVideoQOS:
                        return 1
                if self.defaultVideoBitrate is None or other.defaultVideoBitrate is None:
                    if self.defaultVideoBitrate != other.defaultVideoBitrate:
                        return (-1 if self.defaultVideoBitrate is None else 1)
                else:
                    if self.defaultVideoBitrate < other.defaultVideoBitrate:
                        return -1
                    elif self.defaultVideoBitrate > other.defaultVideoBitrate:
                        return 1
                if self.defaultVideoQuality is None or other.defaultVideoQuality is None:
                    if self.defaultVideoQuality != other.defaultVideoQuality:
                        return (-1 if self.defaultVideoQuality is None else 1)
                else:
                    if self.defaultVideoQuality < other.defaultVideoQuality:
                        return -1
                    elif self.defaultVideoQuality > other.defaultVideoQuality:
                        return 1
                if self.enableUserList is None or other.enableUserList is None:
                    if self.enableUserList != other.enableUserList:
                        return (-1 if self.enableUserList is None else 1)
                else:
                    if self.enableUserList < other.enableUserList:
                        return -1
                    elif self.enableUserList > other.enableUserList:
                        return 1
                if self.result is None or other.result is None:
                    if self.result != other.result:
                        return (-1 if self.result is None else 1)
                else:
                    if self.result < other.result:
                        return -1
                    elif self.result > other.result:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_com.fastonz.fmserver.model._t_ConfRoomStartModel)

        __repr__ = __str__

    _M_com.fastonz.fmserver.model._t_ConfRoomStartModel = IcePy.defineStruct('::com::fastonz::fmserver::model::ConfRoomStartModel', ConfRoomStartModel, (), (
        ('roomName', (), IcePy._t_string),
        ('maxUserCount', (), IcePy._t_int),
        ('defaultMode', (), IcePy._t_string),
        ('useDefaultFlag', (), IcePy._t_int),
        ('defaultVideoCodec', (), IcePy._t_string),
        ('defaultVideoWind', (), IcePy._t_string),
        ('defaultVideoQOS', (), IcePy._t_string),
        ('defaultVideoBitrate', (), IcePy._t_int),
        ('defaultVideoQuality', (), IcePy._t_int),
        ('enableUserList', (), IcePy._t_int),
        ('result', (), IcePy._t_int)
    ))

    _M_com.fastonz.fmserver.model.ConfRoomStartModel = ConfRoomStartModel
    del ConfRoomStartModel

# End of module com.fastonz.fmserver.model

__name__ = 'com.fastonz.fmserver'

# End of module com.fastonz.fmserver

__name__ = 'com.fastonz'

# End of module com.fastonz

__name__ = 'com'

# End of module com
