# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.5
#
# <auto-generated>
#
# Generated from file `DeviceModel.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module com
_M_com = Ice.openModule('com')
__name__ = 'com'

# Start of module com.fastonz
_M_com.fastonz = Ice.openModule('com.fastonz')
__name__ = 'com.fastonz'

# Start of module com.fastonz.fmserver
_M_com.fastonz.fmserver = Ice.openModule('com.fastonz.fmserver')
__name__ = 'com.fastonz.fmserver'

# Start of module com.fastonz.fmserver.model
_M_com.fastonz.fmserver.model = Ice.openModule('com.fastonz.fmserver.model')
__name__ = 'com.fastonz.fmserver.model'

if 'DeviceModel' not in _M_com.fastonz.fmserver.model.__dict__:
    _M_com.fastonz.fmserver.model.DeviceModel = Ice.createTempClass()
    class DeviceModel(object):
        def __init__(self, nodeID=0, devID='', devName='', devType='', devIP='', online='', devStatus='', allocPriority=0, backDevID='', maxOnline=0, curOnline=0, roomMaxUserCount=0, maxBandWidth=0, curBandWidth=0, curRoomCount=0, CPULoad=0, parentDevID='', suportMobile=''):
            self.nodeID = nodeID
            self.devID = devID
            self.devName = devName
            self.devType = devType
            self.devIP = devIP
            self.online = online
            self.devStatus = devStatus
            self.allocPriority = allocPriority
            self.backDevID = backDevID
            self.maxOnline = maxOnline
            self.curOnline = curOnline
            self.roomMaxUserCount = roomMaxUserCount
            self.maxBandWidth = maxBandWidth
            self.curBandWidth = curBandWidth
            self.curRoomCount = curRoomCount
            self.CPULoad = CPULoad
            self.parentDevID = parentDevID
            self.suportMobile = suportMobile

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.nodeID)
            _h = 5 * _h + Ice.getHash(self.devID)
            _h = 5 * _h + Ice.getHash(self.devName)
            _h = 5 * _h + Ice.getHash(self.devType)
            _h = 5 * _h + Ice.getHash(self.devIP)
            _h = 5 * _h + Ice.getHash(self.online)
            _h = 5 * _h + Ice.getHash(self.devStatus)
            _h = 5 * _h + Ice.getHash(self.allocPriority)
            _h = 5 * _h + Ice.getHash(self.backDevID)
            _h = 5 * _h + Ice.getHash(self.maxOnline)
            _h = 5 * _h + Ice.getHash(self.curOnline)
            _h = 5 * _h + Ice.getHash(self.roomMaxUserCount)
            _h = 5 * _h + Ice.getHash(self.maxBandWidth)
            _h = 5 * _h + Ice.getHash(self.curBandWidth)
            _h = 5 * _h + Ice.getHash(self.curRoomCount)
            _h = 5 * _h + Ice.getHash(self.CPULoad)
            _h = 5 * _h + Ice.getHash(self.parentDevID)
            _h = 5 * _h + Ice.getHash(self.suportMobile)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_com.fastonz.fmserver.model.DeviceModel):
                return NotImplemented
            else:
                if self.nodeID is None or other.nodeID is None:
                    if self.nodeID != other.nodeID:
                        return (-1 if self.nodeID is None else 1)
                else:
                    if self.nodeID < other.nodeID:
                        return -1
                    elif self.nodeID > other.nodeID:
                        return 1
                if self.devID is None or other.devID is None:
                    if self.devID != other.devID:
                        return (-1 if self.devID is None else 1)
                else:
                    if self.devID < other.devID:
                        return -1
                    elif self.devID > other.devID:
                        return 1
                if self.devName is None or other.devName is None:
                    if self.devName != other.devName:
                        return (-1 if self.devName is None else 1)
                else:
                    if self.devName < other.devName:
                        return -1
                    elif self.devName > other.devName:
                        return 1
                if self.devType is None or other.devType is None:
                    if self.devType != other.devType:
                        return (-1 if self.devType is None else 1)
                else:
                    if self.devType < other.devType:
                        return -1
                    elif self.devType > other.devType:
                        return 1
                if self.devIP is None or other.devIP is None:
                    if self.devIP != other.devIP:
                        return (-1 if self.devIP is None else 1)
                else:
                    if self.devIP < other.devIP:
                        return -1
                    elif self.devIP > other.devIP:
                        return 1
                if self.online is None or other.online is None:
                    if self.online != other.online:
                        return (-1 if self.online is None else 1)
                else:
                    if self.online < other.online:
                        return -1
                    elif self.online > other.online:
                        return 1
                if self.devStatus is None or other.devStatus is None:
                    if self.devStatus != other.devStatus:
                        return (-1 if self.devStatus is None else 1)
                else:
                    if self.devStatus < other.devStatus:
                        return -1
                    elif self.devStatus > other.devStatus:
                        return 1
                if self.allocPriority is None or other.allocPriority is None:
                    if self.allocPriority != other.allocPriority:
                        return (-1 if self.allocPriority is None else 1)
                else:
                    if self.allocPriority < other.allocPriority:
                        return -1
                    elif self.allocPriority > other.allocPriority:
                        return 1
                if self.backDevID is None or other.backDevID is None:
                    if self.backDevID != other.backDevID:
                        return (-1 if self.backDevID is None else 1)
                else:
                    if self.backDevID < other.backDevID:
                        return -1
                    elif self.backDevID > other.backDevID:
                        return 1
                if self.maxOnline is None or other.maxOnline is None:
                    if self.maxOnline != other.maxOnline:
                        return (-1 if self.maxOnline is None else 1)
                else:
                    if self.maxOnline < other.maxOnline:
                        return -1
                    elif self.maxOnline > other.maxOnline:
                        return 1
                if self.curOnline is None or other.curOnline is None:
                    if self.curOnline != other.curOnline:
                        return (-1 if self.curOnline is None else 1)
                else:
                    if self.curOnline < other.curOnline:
                        return -1
                    elif self.curOnline > other.curOnline:
                        return 1
                if self.roomMaxUserCount is None or other.roomMaxUserCount is None:
                    if self.roomMaxUserCount != other.roomMaxUserCount:
                        return (-1 if self.roomMaxUserCount is None else 1)
                else:
                    if self.roomMaxUserCount < other.roomMaxUserCount:
                        return -1
                    elif self.roomMaxUserCount > other.roomMaxUserCount:
                        return 1
                if self.maxBandWidth is None or other.maxBandWidth is None:
                    if self.maxBandWidth != other.maxBandWidth:
                        return (-1 if self.maxBandWidth is None else 1)
                else:
                    if self.maxBandWidth < other.maxBandWidth:
                        return -1
                    elif self.maxBandWidth > other.maxBandWidth:
                        return 1
                if self.curBandWidth is None or other.curBandWidth is None:
                    if self.curBandWidth != other.curBandWidth:
                        return (-1 if self.curBandWidth is None else 1)
                else:
                    if self.curBandWidth < other.curBandWidth:
                        return -1
                    elif self.curBandWidth > other.curBandWidth:
                        return 1
                if self.curRoomCount is None or other.curRoomCount is None:
                    if self.curRoomCount != other.curRoomCount:
                        return (-1 if self.curRoomCount is None else 1)
                else:
                    if self.curRoomCount < other.curRoomCount:
                        return -1
                    elif self.curRoomCount > other.curRoomCount:
                        return 1
                if self.CPULoad is None or other.CPULoad is None:
                    if self.CPULoad != other.CPULoad:
                        return (-1 if self.CPULoad is None else 1)
                else:
                    if self.CPULoad < other.CPULoad:
                        return -1
                    elif self.CPULoad > other.CPULoad:
                        return 1
                if self.parentDevID is None or other.parentDevID is None:
                    if self.parentDevID != other.parentDevID:
                        return (-1 if self.parentDevID is None else 1)
                else:
                    if self.parentDevID < other.parentDevID:
                        return -1
                    elif self.parentDevID > other.parentDevID:
                        return 1
                if self.suportMobile is None or other.suportMobile is None:
                    if self.suportMobile != other.suportMobile:
                        return (-1 if self.suportMobile is None else 1)
                else:
                    if self.suportMobile < other.suportMobile:
                        return -1
                    elif self.suportMobile > other.suportMobile:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_com.fastonz.fmserver.model._t_DeviceModel)

        __repr__ = __str__

    _M_com.fastonz.fmserver.model._t_DeviceModel = IcePy.defineStruct('::com::fastonz::fmserver::model::DeviceModel', DeviceModel, (), (
        ('nodeID', (), IcePy._t_int),
        ('devID', (), IcePy._t_string),
        ('devName', (), IcePy._t_string),
        ('devType', (), IcePy._t_string),
        ('devIP', (), IcePy._t_string),
        ('online', (), IcePy._t_string),
        ('devStatus', (), IcePy._t_string),
        ('allocPriority', (), IcePy._t_int),
        ('backDevID', (), IcePy._t_string),
        ('maxOnline', (), IcePy._t_int),
        ('curOnline', (), IcePy._t_int),
        ('roomMaxUserCount', (), IcePy._t_int),
        ('maxBandWidth', (), IcePy._t_int),
        ('curBandWidth', (), IcePy._t_int),
        ('curRoomCount', (), IcePy._t_int),
        ('CPULoad', (), IcePy._t_int),
        ('parentDevID', (), IcePy._t_string),
        ('suportMobile', (), IcePy._t_string)
    ))

    _M_com.fastonz.fmserver.model.DeviceModel = DeviceModel
    del DeviceModel

# End of module com.fastonz.fmserver.model

__name__ = 'com.fastonz.fmserver'

# End of module com.fastonz.fmserver

__name__ = 'com.fastonz'

# End of module com.fastonz

__name__ = 'com'

# End of module com
