# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.5
#
# <auto-generated>
#
# Generated from file `GetChatRecordModel.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module com
_M_com = Ice.openModule('com')
__name__ = 'com'

# Start of module com.fastonz
_M_com.fastonz = Ice.openModule('com.fastonz')
__name__ = 'com.fastonz'

# Start of module com.fastonz.live
_M_com.fastonz.live = Ice.openModule('com.fastonz.live')
__name__ = 'com.fastonz.live'

# Start of module com.fastonz.live.sliceprotocol
_M_com.fastonz.live.sliceprotocol = Ice.openModule('com.fastonz.live.sliceprotocol')
__name__ = 'com.fastonz.live.sliceprotocol'

# Start of module com.fastonz.live.sliceprotocol.model
_M_com.fastonz.live.sliceprotocol.model = Ice.openModule('com.fastonz.live.sliceprotocol.model')
__name__ = 'com.fastonz.live.sliceprotocol.model'

if 'GetChatRecordModel' not in _M_com.fastonz.live.sliceprotocol.model.__dict__:
    _M_com.fastonz.live.sliceprotocol.model.GetChatRecordModel = Ice.createTempClass()
    class GetChatRecordModel(object):
        def __init__(self, liveRoomId=0, startTime='', endTime='', recordCount=0):
            self.liveRoomId = liveRoomId
            self.startTime = startTime
            self.endTime = endTime
            self.recordCount = recordCount

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.liveRoomId)
            _h = 5 * _h + Ice.getHash(self.startTime)
            _h = 5 * _h + Ice.getHash(self.endTime)
            _h = 5 * _h + Ice.getHash(self.recordCount)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_com.fastonz.live.sliceprotocol.model.GetChatRecordModel):
                return NotImplemented
            else:
                if self.liveRoomId is None or other.liveRoomId is None:
                    if self.liveRoomId != other.liveRoomId:
                        return (-1 if self.liveRoomId is None else 1)
                else:
                    if self.liveRoomId < other.liveRoomId:
                        return -1
                    elif self.liveRoomId > other.liveRoomId:
                        return 1
                if self.startTime is None or other.startTime is None:
                    if self.startTime != other.startTime:
                        return (-1 if self.startTime is None else 1)
                else:
                    if self.startTime < other.startTime:
                        return -1
                    elif self.startTime > other.startTime:
                        return 1
                if self.endTime is None or other.endTime is None:
                    if self.endTime != other.endTime:
                        return (-1 if self.endTime is None else 1)
                else:
                    if self.endTime < other.endTime:
                        return -1
                    elif self.endTime > other.endTime:
                        return 1
                if self.recordCount is None or other.recordCount is None:
                    if self.recordCount != other.recordCount:
                        return (-1 if self.recordCount is None else 1)
                else:
                    if self.recordCount < other.recordCount:
                        return -1
                    elif self.recordCount > other.recordCount:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_com.fastonz.live.sliceprotocol.model._t_GetChatRecordModel)

        __repr__ = __str__

    _M_com.fastonz.live.sliceprotocol.model._t_GetChatRecordModel = IcePy.defineStruct('::com::fastonz::live::sliceprotocol::model::GetChatRecordModel', GetChatRecordModel, (), (
        ('liveRoomId', (), IcePy._t_int),
        ('startTime', (), IcePy._t_string),
        ('endTime', (), IcePy._t_string),
        ('recordCount', (), IcePy._t_int)
    ))

    _M_com.fastonz.live.sliceprotocol.model.GetChatRecordModel = GetChatRecordModel
    del GetChatRecordModel

# End of module com.fastonz.live.sliceprotocol.model

__name__ = 'com.fastonz.live.sliceprotocol'

# End of module com.fastonz.live.sliceprotocol

__name__ = 'com.fastonz.live'

# End of module com.fastonz.live

__name__ = 'com.fastonz'

# End of module com.fastonz

__name__ = 'com'

# End of module com
