# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.5
#
# <auto-generated>
#
# Generated from file `LicenseModel.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module com
_M_com = Ice.openModule('com')
__name__ = 'com'

# Start of module com.fastonz
_M_com.fastonz = Ice.openModule('com.fastonz')
__name__ = 'com.fastonz'

# Start of module com.fastonz.fmserver
_M_com.fastonz.fmserver = Ice.openModule('com.fastonz.fmserver')
__name__ = 'com.fastonz.fmserver'

# Start of module com.fastonz.fmserver.model
_M_com.fastonz.fmserver.model = Ice.openModule('com.fastonz.fmserver.model')
__name__ = 'com.fastonz.fmserver.model'

if 'LicenseModel' not in _M_com.fastonz.fmserver.model.__dict__:
    _M_com.fastonz.fmserver.model.LicenseModel = Ice.createTempClass()
    class LicenseModel(object):
        def __init__(self, productSerialID='', productName='', productLicenseStatue=0, productActorLicense=0, productGuestLicense=0, productList='', limitedEndTime='', limitedStartTime='', maxVideoWidth=0, maxVideoHeight=0, supportMultiVideo=0, supportDualDisp=0, supportMobile=0, supportHard=0, UpdateTime=0):
            self.productSerialID = productSerialID
            self.productName = productName
            self.productLicenseStatue = productLicenseStatue
            self.productActorLicense = productActorLicense
            self.productGuestLicense = productGuestLicense
            self.productList = productList
            self.limitedEndTime = limitedEndTime
            self.limitedStartTime = limitedStartTime
            self.maxVideoWidth = maxVideoWidth
            self.maxVideoHeight = maxVideoHeight
            self.supportMultiVideo = supportMultiVideo
            self.supportDualDisp = supportDualDisp
            self.supportMobile = supportMobile
            self.supportHard = supportHard
            self.UpdateTime = UpdateTime

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.productSerialID)
            _h = 5 * _h + Ice.getHash(self.productName)
            _h = 5 * _h + Ice.getHash(self.productLicenseStatue)
            _h = 5 * _h + Ice.getHash(self.productActorLicense)
            _h = 5 * _h + Ice.getHash(self.productGuestLicense)
            _h = 5 * _h + Ice.getHash(self.productList)
            _h = 5 * _h + Ice.getHash(self.limitedEndTime)
            _h = 5 * _h + Ice.getHash(self.limitedStartTime)
            _h = 5 * _h + Ice.getHash(self.maxVideoWidth)
            _h = 5 * _h + Ice.getHash(self.maxVideoHeight)
            _h = 5 * _h + Ice.getHash(self.supportMultiVideo)
            _h = 5 * _h + Ice.getHash(self.supportDualDisp)
            _h = 5 * _h + Ice.getHash(self.supportMobile)
            _h = 5 * _h + Ice.getHash(self.supportHard)
            _h = 5 * _h + Ice.getHash(self.UpdateTime)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_com.fastonz.fmserver.model.LicenseModel):
                return NotImplemented
            else:
                if self.productSerialID is None or other.productSerialID is None:
                    if self.productSerialID != other.productSerialID:
                        return (-1 if self.productSerialID is None else 1)
                else:
                    if self.productSerialID < other.productSerialID:
                        return -1
                    elif self.productSerialID > other.productSerialID:
                        return 1
                if self.productName is None or other.productName is None:
                    if self.productName != other.productName:
                        return (-1 if self.productName is None else 1)
                else:
                    if self.productName < other.productName:
                        return -1
                    elif self.productName > other.productName:
                        return 1
                if self.productLicenseStatue is None or other.productLicenseStatue is None:
                    if self.productLicenseStatue != other.productLicenseStatue:
                        return (-1 if self.productLicenseStatue is None else 1)
                else:
                    if self.productLicenseStatue < other.productLicenseStatue:
                        return -1
                    elif self.productLicenseStatue > other.productLicenseStatue:
                        return 1
                if self.productActorLicense is None or other.productActorLicense is None:
                    if self.productActorLicense != other.productActorLicense:
                        return (-1 if self.productActorLicense is None else 1)
                else:
                    if self.productActorLicense < other.productActorLicense:
                        return -1
                    elif self.productActorLicense > other.productActorLicense:
                        return 1
                if self.productGuestLicense is None or other.productGuestLicense is None:
                    if self.productGuestLicense != other.productGuestLicense:
                        return (-1 if self.productGuestLicense is None else 1)
                else:
                    if self.productGuestLicense < other.productGuestLicense:
                        return -1
                    elif self.productGuestLicense > other.productGuestLicense:
                        return 1
                if self.productList is None or other.productList is None:
                    if self.productList != other.productList:
                        return (-1 if self.productList is None else 1)
                else:
                    if self.productList < other.productList:
                        return -1
                    elif self.productList > other.productList:
                        return 1
                if self.limitedEndTime is None or other.limitedEndTime is None:
                    if self.limitedEndTime != other.limitedEndTime:
                        return (-1 if self.limitedEndTime is None else 1)
                else:
                    if self.limitedEndTime < other.limitedEndTime:
                        return -1
                    elif self.limitedEndTime > other.limitedEndTime:
                        return 1
                if self.limitedStartTime is None or other.limitedStartTime is None:
                    if self.limitedStartTime != other.limitedStartTime:
                        return (-1 if self.limitedStartTime is None else 1)
                else:
                    if self.limitedStartTime < other.limitedStartTime:
                        return -1
                    elif self.limitedStartTime > other.limitedStartTime:
                        return 1
                if self.maxVideoWidth is None or other.maxVideoWidth is None:
                    if self.maxVideoWidth != other.maxVideoWidth:
                        return (-1 if self.maxVideoWidth is None else 1)
                else:
                    if self.maxVideoWidth < other.maxVideoWidth:
                        return -1
                    elif self.maxVideoWidth > other.maxVideoWidth:
                        return 1
                if self.maxVideoHeight is None or other.maxVideoHeight is None:
                    if self.maxVideoHeight != other.maxVideoHeight:
                        return (-1 if self.maxVideoHeight is None else 1)
                else:
                    if self.maxVideoHeight < other.maxVideoHeight:
                        return -1
                    elif self.maxVideoHeight > other.maxVideoHeight:
                        return 1
                if self.supportMultiVideo is None or other.supportMultiVideo is None:
                    if self.supportMultiVideo != other.supportMultiVideo:
                        return (-1 if self.supportMultiVideo is None else 1)
                else:
                    if self.supportMultiVideo < other.supportMultiVideo:
                        return -1
                    elif self.supportMultiVideo > other.supportMultiVideo:
                        return 1
                if self.supportDualDisp is None or other.supportDualDisp is None:
                    if self.supportDualDisp != other.supportDualDisp:
                        return (-1 if self.supportDualDisp is None else 1)
                else:
                    if self.supportDualDisp < other.supportDualDisp:
                        return -1
                    elif self.supportDualDisp > other.supportDualDisp:
                        return 1
                if self.supportMobile is None or other.supportMobile is None:
                    if self.supportMobile != other.supportMobile:
                        return (-1 if self.supportMobile is None else 1)
                else:
                    if self.supportMobile < other.supportMobile:
                        return -1
                    elif self.supportMobile > other.supportMobile:
                        return 1
                if self.supportHard is None or other.supportHard is None:
                    if self.supportHard != other.supportHard:
                        return (-1 if self.supportHard is None else 1)
                else:
                    if self.supportHard < other.supportHard:
                        return -1
                    elif self.supportHard > other.supportHard:
                        return 1
                if self.UpdateTime is None or other.UpdateTime is None:
                    if self.UpdateTime != other.UpdateTime:
                        return (-1 if self.UpdateTime is None else 1)
                else:
                    if self.UpdateTime < other.UpdateTime:
                        return -1
                    elif self.UpdateTime > other.UpdateTime:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_com.fastonz.fmserver.model._t_LicenseModel)

        __repr__ = __str__

    _M_com.fastonz.fmserver.model._t_LicenseModel = IcePy.defineStruct('::com::fastonz::fmserver::model::LicenseModel', LicenseModel, (), (
        ('productSerialID', (), IcePy._t_string),
        ('productName', (), IcePy._t_string),
        ('productLicenseStatue', (), IcePy._t_int),
        ('productActorLicense', (), IcePy._t_int),
        ('productGuestLicense', (), IcePy._t_int),
        ('productList', (), IcePy._t_string),
        ('limitedEndTime', (), IcePy._t_string),
        ('limitedStartTime', (), IcePy._t_string),
        ('maxVideoWidth', (), IcePy._t_int),
        ('maxVideoHeight', (), IcePy._t_int),
        ('supportMultiVideo', (), IcePy._t_int),
        ('supportDualDisp', (), IcePy._t_int),
        ('supportMobile', (), IcePy._t_int),
        ('supportHard', (), IcePy._t_int),
        ('UpdateTime', (), IcePy._t_long)
    ))

    _M_com.fastonz.fmserver.model.LicenseModel = LicenseModel
    del LicenseModel

# End of module com.fastonz.fmserver.model

__name__ = 'com.fastonz.fmserver'

# End of module com.fastonz.fmserver

__name__ = 'com.fastonz'

# End of module com.fastonz

__name__ = 'com'

# End of module com
