# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.5
#
# <auto-generated>
#
# Generated from file `LiveRoomInfoModel.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module com
_M_com = Ice.openModule('com')
__name__ = 'com'

# Start of module com.fastonz
_M_com.fastonz = Ice.openModule('com.fastonz')
__name__ = 'com.fastonz'

# Start of module com.fastonz.live
_M_com.fastonz.live = Ice.openModule('com.fastonz.live')
__name__ = 'com.fastonz.live'

# Start of module com.fastonz.live.sliceprotocol
_M_com.fastonz.live.sliceprotocol = Ice.openModule('com.fastonz.live.sliceprotocol')
__name__ = 'com.fastonz.live.sliceprotocol'

# Start of module com.fastonz.live.sliceprotocol.model
_M_com.fastonz.live.sliceprotocol.model = Ice.openModule('com.fastonz.live.sliceprotocol.model')
__name__ = 'com.fastonz.live.sliceprotocol.model'

if 'LiveRoomInfoModel' not in _M_com.fastonz.live.sliceprotocol.model.__dict__:
    _M_com.fastonz.live.sliceprotocol.model.LiveRoomInfoModel = Ice.createTempClass()
    class LiveRoomInfoModel(object):
        def __init__(self, liveRoomId=0, companyId=0, liveNo='', liveName='', startTime='', endTime='', confRoomId=0, contextId='', confRoomAddr='', serviceAttr='', pushStreamType='', pushStatus=0, faultStatus=0, layoutConfig='', watermarkConfig='', logoConfig='', delayConfig='', transcribeConfig=''):
            self.liveRoomId = liveRoomId
            self.companyId = companyId
            self.liveNo = liveNo
            self.liveName = liveName
            self.startTime = startTime
            self.endTime = endTime
            self.confRoomId = confRoomId
            self.contextId = contextId
            self.confRoomAddr = confRoomAddr
            self.serviceAttr = serviceAttr
            self.pushStreamType = pushStreamType
            self.pushStatus = pushStatus
            self.faultStatus = faultStatus
            self.layoutConfig = layoutConfig
            self.watermarkConfig = watermarkConfig
            self.logoConfig = logoConfig
            self.delayConfig = delayConfig
            self.transcribeConfig = transcribeConfig

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.liveRoomId)
            _h = 5 * _h + Ice.getHash(self.companyId)
            _h = 5 * _h + Ice.getHash(self.liveNo)
            _h = 5 * _h + Ice.getHash(self.liveName)
            _h = 5 * _h + Ice.getHash(self.startTime)
            _h = 5 * _h + Ice.getHash(self.endTime)
            _h = 5 * _h + Ice.getHash(self.confRoomId)
            _h = 5 * _h + Ice.getHash(self.contextId)
            _h = 5 * _h + Ice.getHash(self.confRoomAddr)
            _h = 5 * _h + Ice.getHash(self.serviceAttr)
            _h = 5 * _h + Ice.getHash(self.pushStreamType)
            _h = 5 * _h + Ice.getHash(self.pushStatus)
            _h = 5 * _h + Ice.getHash(self.faultStatus)
            _h = 5 * _h + Ice.getHash(self.layoutConfig)
            _h = 5 * _h + Ice.getHash(self.watermarkConfig)
            _h = 5 * _h + Ice.getHash(self.logoConfig)
            _h = 5 * _h + Ice.getHash(self.delayConfig)
            _h = 5 * _h + Ice.getHash(self.transcribeConfig)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_com.fastonz.live.sliceprotocol.model.LiveRoomInfoModel):
                return NotImplemented
            else:
                if self.liveRoomId is None or other.liveRoomId is None:
                    if self.liveRoomId != other.liveRoomId:
                        return (-1 if self.liveRoomId is None else 1)
                else:
                    if self.liveRoomId < other.liveRoomId:
                        return -1
                    elif self.liveRoomId > other.liveRoomId:
                        return 1
                if self.companyId is None or other.companyId is None:
                    if self.companyId != other.companyId:
                        return (-1 if self.companyId is None else 1)
                else:
                    if self.companyId < other.companyId:
                        return -1
                    elif self.companyId > other.companyId:
                        return 1
                if self.liveNo is None or other.liveNo is None:
                    if self.liveNo != other.liveNo:
                        return (-1 if self.liveNo is None else 1)
                else:
                    if self.liveNo < other.liveNo:
                        return -1
                    elif self.liveNo > other.liveNo:
                        return 1
                if self.liveName is None or other.liveName is None:
                    if self.liveName != other.liveName:
                        return (-1 if self.liveName is None else 1)
                else:
                    if self.liveName < other.liveName:
                        return -1
                    elif self.liveName > other.liveName:
                        return 1
                if self.startTime is None or other.startTime is None:
                    if self.startTime != other.startTime:
                        return (-1 if self.startTime is None else 1)
                else:
                    if self.startTime < other.startTime:
                        return -1
                    elif self.startTime > other.startTime:
                        return 1
                if self.endTime is None or other.endTime is None:
                    if self.endTime != other.endTime:
                        return (-1 if self.endTime is None else 1)
                else:
                    if self.endTime < other.endTime:
                        return -1
                    elif self.endTime > other.endTime:
                        return 1
                if self.confRoomId is None or other.confRoomId is None:
                    if self.confRoomId != other.confRoomId:
                        return (-1 if self.confRoomId is None else 1)
                else:
                    if self.confRoomId < other.confRoomId:
                        return -1
                    elif self.confRoomId > other.confRoomId:
                        return 1
                if self.contextId is None or other.contextId is None:
                    if self.contextId != other.contextId:
                        return (-1 if self.contextId is None else 1)
                else:
                    if self.contextId < other.contextId:
                        return -1
                    elif self.contextId > other.contextId:
                        return 1
                if self.confRoomAddr is None or other.confRoomAddr is None:
                    if self.confRoomAddr != other.confRoomAddr:
                        return (-1 if self.confRoomAddr is None else 1)
                else:
                    if self.confRoomAddr < other.confRoomAddr:
                        return -1
                    elif self.confRoomAddr > other.confRoomAddr:
                        return 1
                if self.serviceAttr is None or other.serviceAttr is None:
                    if self.serviceAttr != other.serviceAttr:
                        return (-1 if self.serviceAttr is None else 1)
                else:
                    if self.serviceAttr < other.serviceAttr:
                        return -1
                    elif self.serviceAttr > other.serviceAttr:
                        return 1
                if self.pushStreamType is None or other.pushStreamType is None:
                    if self.pushStreamType != other.pushStreamType:
                        return (-1 if self.pushStreamType is None else 1)
                else:
                    if self.pushStreamType < other.pushStreamType:
                        return -1
                    elif self.pushStreamType > other.pushStreamType:
                        return 1
                if self.pushStatus is None or other.pushStatus is None:
                    if self.pushStatus != other.pushStatus:
                        return (-1 if self.pushStatus is None else 1)
                else:
                    if self.pushStatus < other.pushStatus:
                        return -1
                    elif self.pushStatus > other.pushStatus:
                        return 1
                if self.faultStatus is None or other.faultStatus is None:
                    if self.faultStatus != other.faultStatus:
                        return (-1 if self.faultStatus is None else 1)
                else:
                    if self.faultStatus < other.faultStatus:
                        return -1
                    elif self.faultStatus > other.faultStatus:
                        return 1
                if self.layoutConfig is None or other.layoutConfig is None:
                    if self.layoutConfig != other.layoutConfig:
                        return (-1 if self.layoutConfig is None else 1)
                else:
                    if self.layoutConfig < other.layoutConfig:
                        return -1
                    elif self.layoutConfig > other.layoutConfig:
                        return 1
                if self.watermarkConfig is None or other.watermarkConfig is None:
                    if self.watermarkConfig != other.watermarkConfig:
                        return (-1 if self.watermarkConfig is None else 1)
                else:
                    if self.watermarkConfig < other.watermarkConfig:
                        return -1
                    elif self.watermarkConfig > other.watermarkConfig:
                        return 1
                if self.logoConfig is None or other.logoConfig is None:
                    if self.logoConfig != other.logoConfig:
                        return (-1 if self.logoConfig is None else 1)
                else:
                    if self.logoConfig < other.logoConfig:
                        return -1
                    elif self.logoConfig > other.logoConfig:
                        return 1
                if self.delayConfig is None or other.delayConfig is None:
                    if self.delayConfig != other.delayConfig:
                        return (-1 if self.delayConfig is None else 1)
                else:
                    if self.delayConfig < other.delayConfig:
                        return -1
                    elif self.delayConfig > other.delayConfig:
                        return 1
                if self.transcribeConfig is None or other.transcribeConfig is None:
                    if self.transcribeConfig != other.transcribeConfig:
                        return (-1 if self.transcribeConfig is None else 1)
                else:
                    if self.transcribeConfig < other.transcribeConfig:
                        return -1
                    elif self.transcribeConfig > other.transcribeConfig:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_com.fastonz.live.sliceprotocol.model._t_LiveRoomInfoModel)

        __repr__ = __str__

    _M_com.fastonz.live.sliceprotocol.model._t_LiveRoomInfoModel = IcePy.defineStruct('::com::fastonz::live::sliceprotocol::model::LiveRoomInfoModel', LiveRoomInfoModel, (), (
        ('liveRoomId', (), IcePy._t_int),
        ('companyId', (), IcePy._t_int),
        ('liveNo', (), IcePy._t_string),
        ('liveName', (), IcePy._t_string),
        ('startTime', (), IcePy._t_string),
        ('endTime', (), IcePy._t_string),
        ('confRoomId', (), IcePy._t_int),
        ('contextId', (), IcePy._t_string),
        ('confRoomAddr', (), IcePy._t_string),
        ('serviceAttr', (), IcePy._t_string),
        ('pushStreamType', (), IcePy._t_string),
        ('pushStatus', (), IcePy._t_int),
        ('faultStatus', (), IcePy._t_int),
        ('layoutConfig', (), IcePy._t_string),
        ('watermarkConfig', (), IcePy._t_string),
        ('logoConfig', (), IcePy._t_string),
        ('delayConfig', (), IcePy._t_string),
        ('transcribeConfig', (), IcePy._t_string)
    ))

    _M_com.fastonz.live.sliceprotocol.model.LiveRoomInfoModel = LiveRoomInfoModel
    del LiveRoomInfoModel

# End of module com.fastonz.live.sliceprotocol.model

__name__ = 'com.fastonz.live.sliceprotocol'

# End of module com.fastonz.live.sliceprotocol

__name__ = 'com.fastonz.live'

# End of module com.fastonz.live

__name__ = 'com.fastonz'

# End of module com.fastonz

__name__ = 'com'

# End of module com
