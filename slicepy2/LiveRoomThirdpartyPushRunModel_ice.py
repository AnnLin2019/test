# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.5
#
# <auto-generated>
#
# Generated from file `LiveRoomThirdpartyPushRunModel.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module com
_M_com = Ice.openModule('com')
__name__ = 'com'

# Start of module com.fastonz
_M_com.fastonz = Ice.openModule('com.fastonz')
__name__ = 'com.fastonz'

# Start of module com.fastonz.live
_M_com.fastonz.live = Ice.openModule('com.fastonz.live')
__name__ = 'com.fastonz.live'

# Start of module com.fastonz.live.sliceprotocol
_M_com.fastonz.live.sliceprotocol = Ice.openModule('com.fastonz.live.sliceprotocol')
__name__ = 'com.fastonz.live.sliceprotocol'

# Start of module com.fastonz.live.sliceprotocol.model
_M_com.fastonz.live.sliceprotocol.model = Ice.openModule('com.fastonz.live.sliceprotocol.model')
__name__ = 'com.fastonz.live.sliceprotocol.model'

if 'LiveRoomThirdpartyPushRunModel' not in _M_com.fastonz.live.sliceprotocol.model.__dict__:
    _M_com.fastonz.live.sliceprotocol.model.LiveRoomThirdpartyPushRunModel = Ice.createTempClass()
    class LiveRoomThirdpartyPushRunModel(object):
        def __init__(self, platformId=0, pushId='', companyId=0, liveRoomId=0, name='', type='', pushUrl=''):
            self.platformId = platformId
            self.pushId = pushId
            self.companyId = companyId
            self.liveRoomId = liveRoomId
            self.name = name
            self.type = type
            self.pushUrl = pushUrl

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.platformId)
            _h = 5 * _h + Ice.getHash(self.pushId)
            _h = 5 * _h + Ice.getHash(self.companyId)
            _h = 5 * _h + Ice.getHash(self.liveRoomId)
            _h = 5 * _h + Ice.getHash(self.name)
            _h = 5 * _h + Ice.getHash(self.type)
            _h = 5 * _h + Ice.getHash(self.pushUrl)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_com.fastonz.live.sliceprotocol.model.LiveRoomThirdpartyPushRunModel):
                return NotImplemented
            else:
                if self.platformId is None or other.platformId is None:
                    if self.platformId != other.platformId:
                        return (-1 if self.platformId is None else 1)
                else:
                    if self.platformId < other.platformId:
                        return -1
                    elif self.platformId > other.platformId:
                        return 1
                if self.pushId is None or other.pushId is None:
                    if self.pushId != other.pushId:
                        return (-1 if self.pushId is None else 1)
                else:
                    if self.pushId < other.pushId:
                        return -1
                    elif self.pushId > other.pushId:
                        return 1
                if self.companyId is None or other.companyId is None:
                    if self.companyId != other.companyId:
                        return (-1 if self.companyId is None else 1)
                else:
                    if self.companyId < other.companyId:
                        return -1
                    elif self.companyId > other.companyId:
                        return 1
                if self.liveRoomId is None or other.liveRoomId is None:
                    if self.liveRoomId != other.liveRoomId:
                        return (-1 if self.liveRoomId is None else 1)
                else:
                    if self.liveRoomId < other.liveRoomId:
                        return -1
                    elif self.liveRoomId > other.liveRoomId:
                        return 1
                if self.name is None or other.name is None:
                    if self.name != other.name:
                        return (-1 if self.name is None else 1)
                else:
                    if self.name < other.name:
                        return -1
                    elif self.name > other.name:
                        return 1
                if self.type is None or other.type is None:
                    if self.type != other.type:
                        return (-1 if self.type is None else 1)
                else:
                    if self.type < other.type:
                        return -1
                    elif self.type > other.type:
                        return 1
                if self.pushUrl is None or other.pushUrl is None:
                    if self.pushUrl != other.pushUrl:
                        return (-1 if self.pushUrl is None else 1)
                else:
                    if self.pushUrl < other.pushUrl:
                        return -1
                    elif self.pushUrl > other.pushUrl:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_com.fastonz.live.sliceprotocol.model._t_LiveRoomThirdpartyPushRunModel)

        __repr__ = __str__

    _M_com.fastonz.live.sliceprotocol.model._t_LiveRoomThirdpartyPushRunModel = IcePy.defineStruct('::com::fastonz::live::sliceprotocol::model::LiveRoomThirdpartyPushRunModel', LiveRoomThirdpartyPushRunModel, (), (
        ('platformId', (), IcePy._t_int),
        ('pushId', (), IcePy._t_string),
        ('companyId', (), IcePy._t_int),
        ('liveRoomId', (), IcePy._t_int),
        ('name', (), IcePy._t_string),
        ('type', (), IcePy._t_string),
        ('pushUrl', (), IcePy._t_string)
    ))

    _M_com.fastonz.live.sliceprotocol.model.LiveRoomThirdpartyPushRunModel = LiveRoomThirdpartyPushRunModel
    del LiveRoomThirdpartyPushRunModel

# End of module com.fastonz.live.sliceprotocol.model

__name__ = 'com.fastonz.live.sliceprotocol'

# End of module com.fastonz.live.sliceprotocol

__name__ = 'com.fastonz.live'

# End of module com.fastonz.live

__name__ = 'com.fastonz'

# End of module com.fastonz

__name__ = 'com'

# End of module com
