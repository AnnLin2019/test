# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.5
#
# <auto-generated>
#
# Generated from file `LoadService.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy
import LoadModel_ice
import LoadHeartbeatModel_ice

# Included module com
_M_com = Ice.openModule('com')

# Included module com.fastonz
_M_com.fastonz = Ice.openModule('com.fastonz')

# Included module com.fastonz.loadSrv
_M_com.fastonz.loadSrv = Ice.openModule('com.fastonz.loadSrv')

# Included module com.fastonz.loadSrv.model
_M_com.fastonz.loadSrv.model = Ice.openModule('com.fastonz.loadSrv.model')

# Start of module com
__name__ = 'com'

# Start of module com.fastonz
__name__ = 'com.fastonz'

# Start of module com.fastonz.loadSrv
__name__ = 'com.fastonz.loadSrv'

# Start of module com.fastonz.loadSrv.controller
_M_com.fastonz.loadSrv.controller = Ice.openModule('com.fastonz.loadSrv.controller')
__name__ = 'com.fastonz.loadSrv.controller'

_M_com.fastonz.loadSrv.controller._t_LoadService = IcePy.defineValue('::com::fastonz::loadSrv::controller::LoadService', Ice.Value, -1, (), False, True, None, ())

if 'LoadServicePrx' not in _M_com.fastonz.loadSrv.controller.__dict__:
    _M_com.fastonz.loadSrv.controller.LoadServicePrx = Ice.createTempClass()
    class LoadServicePrx(Ice.ObjectPrx):

        def register(self, appModel, context=None):
            return _M_com.fastonz.loadSrv.controller.LoadService._op_register.invoke(self, ((appModel, ), context))

        def registerAsync(self, appModel, context=None):
            return _M_com.fastonz.loadSrv.controller.LoadService._op_register.invokeAsync(self, ((appModel, ), context))

        def begin_register(self, appModel, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.fastonz.loadSrv.controller.LoadService._op_register.begin(self, ((appModel, ), _response, _ex, _sent, context))

        def end_register(self, _r):
            return _M_com.fastonz.loadSrv.controller.LoadService._op_register.end(self, _r)

        def heartbeat(self, heartbeatModel, context=None):
            return _M_com.fastonz.loadSrv.controller.LoadService._op_heartbeat.invoke(self, ((heartbeatModel, ), context))

        def heartbeatAsync(self, heartbeatModel, context=None):
            return _M_com.fastonz.loadSrv.controller.LoadService._op_heartbeat.invokeAsync(self, ((heartbeatModel, ), context))

        def begin_heartbeat(self, heartbeatModel, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.fastonz.loadSrv.controller.LoadService._op_heartbeat.begin(self, ((heartbeatModel, ), _response, _ex, _sent, context))

        def end_heartbeat(self, _r):
            return _M_com.fastonz.loadSrv.controller.LoadService._op_heartbeat.end(self, _r)

        def getMinLoadService(self, appType, oldAddr, context=None):
            return _M_com.fastonz.loadSrv.controller.LoadService._op_getMinLoadService.invoke(self, ((appType, oldAddr), context))

        def getMinLoadServiceAsync(self, appType, oldAddr, context=None):
            return _M_com.fastonz.loadSrv.controller.LoadService._op_getMinLoadService.invokeAsync(self, ((appType, oldAddr), context))

        def begin_getMinLoadService(self, appType, oldAddr, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.fastonz.loadSrv.controller.LoadService._op_getMinLoadService.begin(self, ((appType, oldAddr), _response, _ex, _sent, context))

        def end_getMinLoadService(self, _r):
            return _M_com.fastonz.loadSrv.controller.LoadService._op_getMinLoadService.end(self, _r)

        def getLiveSrvAddr(self, liveRoomId, context=None):
            return _M_com.fastonz.loadSrv.controller.LoadService._op_getLiveSrvAddr.invoke(self, ((liveRoomId, ), context))

        def getLiveSrvAddrAsync(self, liveRoomId, context=None):
            return _M_com.fastonz.loadSrv.controller.LoadService._op_getLiveSrvAddr.invokeAsync(self, ((liveRoomId, ), context))

        def begin_getLiveSrvAddr(self, liveRoomId, _response=None, _ex=None, _sent=None, context=None):
            return _M_com.fastonz.loadSrv.controller.LoadService._op_getLiveSrvAddr.begin(self, ((liveRoomId, ), _response, _ex, _sent, context))

        def end_getLiveSrvAddr(self, _r):
            return _M_com.fastonz.loadSrv.controller.LoadService._op_getLiveSrvAddr.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_com.fastonz.loadSrv.controller.LoadServicePrx.ice_checkedCast(proxy, '::com::fastonz::loadSrv::controller::LoadService', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_com.fastonz.loadSrv.controller.LoadServicePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::com::fastonz::loadSrv::controller::LoadService'
    _M_com.fastonz.loadSrv.controller._t_LoadServicePrx = IcePy.defineProxy('::com::fastonz::loadSrv::controller::LoadService', LoadServicePrx)

    _M_com.fastonz.loadSrv.controller.LoadServicePrx = LoadServicePrx
    del LoadServicePrx

    _M_com.fastonz.loadSrv.controller.LoadService = Ice.createTempClass()
    class LoadService(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::com::fastonz::loadSrv::controller::LoadService')

        def ice_id(self, current=None):
            return '::com::fastonz::loadSrv::controller::LoadService'

        @staticmethod
        def ice_staticId():
            return '::com::fastonz::loadSrv::controller::LoadService'

        def register(self, appModel, current=None):
            raise NotImplementedError("servant method 'register' not implemented")

        def heartbeat(self, heartbeatModel, current=None):
            raise NotImplementedError("servant method 'heartbeat' not implemented")

        def getMinLoadService(self, appType, oldAddr, current=None):
            raise NotImplementedError("servant method 'getMinLoadService' not implemented")

        def getLiveSrvAddr(self, liveRoomId, current=None):
            raise NotImplementedError("servant method 'getLiveSrvAddr' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_com.fastonz.loadSrv.controller._t_LoadServiceDisp)

        __repr__ = __str__

    _M_com.fastonz.loadSrv.controller._t_LoadServiceDisp = IcePy.defineClass('::com::fastonz::loadSrv::controller::LoadService', LoadService, (), None, ())
    LoadService._ice_type = _M_com.fastonz.loadSrv.controller._t_LoadServiceDisp

    LoadService._op_register = IcePy.Operation('register', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, None, (), (((), _M_com.fastonz.loadSrv.model._t_ServiceModel, False, 0),), (), ((), IcePy._t_int, False, 0), ())
    LoadService._op_heartbeat = IcePy.Operation('heartbeat', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, None, (), (((), _M_com.fastonz.loadSrv.model._t_ServiceHeartbeatModel, False, 0),), (), ((), IcePy._t_int, False, 0), ())
    LoadService._op_getMinLoadService = IcePy.Operation('getMinLoadService', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_string, False, 0)), (((), IcePy._t_string, False, 0),), ((), IcePy._t_int, False, 0), ())
    LoadService._op_getLiveSrvAddr = IcePy.Operation('getLiveSrvAddr', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, None, (), (((), IcePy._t_int, False, 0),), (((), IcePy._t_string, False, 0),), ((), IcePy._t_int, False, 0), ())

    _M_com.fastonz.loadSrv.controller.LoadService = LoadService
    del LoadService

# End of module com.fastonz.loadSrv.controller

__name__ = 'com.fastonz.loadSrv'

# End of module com.fastonz.loadSrv

__name__ = 'com.fastonz'

# End of module com.fastonz

__name__ = 'com'

# End of module com
