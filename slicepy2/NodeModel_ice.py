# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.5
#
# <auto-generated>
#
# Generated from file `NodeModel.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module com
_M_com = Ice.openModule('com')
__name__ = 'com'

# Start of module com.fastonz
_M_com.fastonz = Ice.openModule('com.fastonz')
__name__ = 'com.fastonz'

# Start of module com.fastonz.fmserver
_M_com.fastonz.fmserver = Ice.openModule('com.fastonz.fmserver')
__name__ = 'com.fastonz.fmserver'

# Start of module com.fastonz.fmserver.model
_M_com.fastonz.fmserver.model = Ice.openModule('com.fastonz.fmserver.model')
__name__ = 'com.fastonz.fmserver.model'

if 'NodeModel' not in _M_com.fastonz.fmserver.model.__dict__:
    _M_com.fastonz.fmserver.model.NodeModel = Ice.createTempClass()
    class NodeModel(object):
        def __init__(self, nodeID=0, nodeName='', nodeManAddr='', checkCode='', parentNodeID='', isLocal=0, nodeStatus=''):
            self.nodeID = nodeID
            self.nodeName = nodeName
            self.nodeManAddr = nodeManAddr
            self.checkCode = checkCode
            self.parentNodeID = parentNodeID
            self.isLocal = isLocal
            self.nodeStatus = nodeStatus

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.nodeID)
            _h = 5 * _h + Ice.getHash(self.nodeName)
            _h = 5 * _h + Ice.getHash(self.nodeManAddr)
            _h = 5 * _h + Ice.getHash(self.checkCode)
            _h = 5 * _h + Ice.getHash(self.parentNodeID)
            _h = 5 * _h + Ice.getHash(self.isLocal)
            _h = 5 * _h + Ice.getHash(self.nodeStatus)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_com.fastonz.fmserver.model.NodeModel):
                return NotImplemented
            else:
                if self.nodeID is None or other.nodeID is None:
                    if self.nodeID != other.nodeID:
                        return (-1 if self.nodeID is None else 1)
                else:
                    if self.nodeID < other.nodeID:
                        return -1
                    elif self.nodeID > other.nodeID:
                        return 1
                if self.nodeName is None or other.nodeName is None:
                    if self.nodeName != other.nodeName:
                        return (-1 if self.nodeName is None else 1)
                else:
                    if self.nodeName < other.nodeName:
                        return -1
                    elif self.nodeName > other.nodeName:
                        return 1
                if self.nodeManAddr is None or other.nodeManAddr is None:
                    if self.nodeManAddr != other.nodeManAddr:
                        return (-1 if self.nodeManAddr is None else 1)
                else:
                    if self.nodeManAddr < other.nodeManAddr:
                        return -1
                    elif self.nodeManAddr > other.nodeManAddr:
                        return 1
                if self.checkCode is None or other.checkCode is None:
                    if self.checkCode != other.checkCode:
                        return (-1 if self.checkCode is None else 1)
                else:
                    if self.checkCode < other.checkCode:
                        return -1
                    elif self.checkCode > other.checkCode:
                        return 1
                if self.parentNodeID is None or other.parentNodeID is None:
                    if self.parentNodeID != other.parentNodeID:
                        return (-1 if self.parentNodeID is None else 1)
                else:
                    if self.parentNodeID < other.parentNodeID:
                        return -1
                    elif self.parentNodeID > other.parentNodeID:
                        return 1
                if self.isLocal is None or other.isLocal is None:
                    if self.isLocal != other.isLocal:
                        return (-1 if self.isLocal is None else 1)
                else:
                    if self.isLocal < other.isLocal:
                        return -1
                    elif self.isLocal > other.isLocal:
                        return 1
                if self.nodeStatus is None or other.nodeStatus is None:
                    if self.nodeStatus != other.nodeStatus:
                        return (-1 if self.nodeStatus is None else 1)
                else:
                    if self.nodeStatus < other.nodeStatus:
                        return -1
                    elif self.nodeStatus > other.nodeStatus:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_com.fastonz.fmserver.model._t_NodeModel)

        __repr__ = __str__

    _M_com.fastonz.fmserver.model._t_NodeModel = IcePy.defineStruct('::com::fastonz::fmserver::model::NodeModel', NodeModel, (), (
        ('nodeID', (), IcePy._t_int),
        ('nodeName', (), IcePy._t_string),
        ('nodeManAddr', (), IcePy._t_string),
        ('checkCode', (), IcePy._t_string),
        ('parentNodeID', (), IcePy._t_string),
        ('isLocal', (), IcePy._t_int),
        ('nodeStatus', (), IcePy._t_string)
    ))

    _M_com.fastonz.fmserver.model.NodeModel = NodeModel
    del NodeModel

if 'SubNodeModel' not in _M_com.fastonz.fmserver.model.__dict__:
    _M_com.fastonz.fmserver.model.SubNodeModel = Ice.createTempClass()
    class SubNodeModel(object):
        def __init__(self, subNodeID=0, nodeStatus='', statusReasons=0):
            self.subNodeID = subNodeID
            self.nodeStatus = nodeStatus
            self.statusReasons = statusReasons

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.subNodeID)
            _h = 5 * _h + Ice.getHash(self.nodeStatus)
            _h = 5 * _h + Ice.getHash(self.statusReasons)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_com.fastonz.fmserver.model.SubNodeModel):
                return NotImplemented
            else:
                if self.subNodeID is None or other.subNodeID is None:
                    if self.subNodeID != other.subNodeID:
                        return (-1 if self.subNodeID is None else 1)
                else:
                    if self.subNodeID < other.subNodeID:
                        return -1
                    elif self.subNodeID > other.subNodeID:
                        return 1
                if self.nodeStatus is None or other.nodeStatus is None:
                    if self.nodeStatus != other.nodeStatus:
                        return (-1 if self.nodeStatus is None else 1)
                else:
                    if self.nodeStatus < other.nodeStatus:
                        return -1
                    elif self.nodeStatus > other.nodeStatus:
                        return 1
                if self.statusReasons is None or other.statusReasons is None:
                    if self.statusReasons != other.statusReasons:
                        return (-1 if self.statusReasons is None else 1)
                else:
                    if self.statusReasons < other.statusReasons:
                        return -1
                    elif self.statusReasons > other.statusReasons:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_com.fastonz.fmserver.model._t_SubNodeModel)

        __repr__ = __str__

    _M_com.fastonz.fmserver.model._t_SubNodeModel = IcePy.defineStruct('::com::fastonz::fmserver::model::SubNodeModel', SubNodeModel, (), (
        ('subNodeID', (), IcePy._t_int),
        ('nodeStatus', (), IcePy._t_string),
        ('statusReasons', (), IcePy._t_int)
    ))

    _M_com.fastonz.fmserver.model.SubNodeModel = SubNodeModel
    del SubNodeModel

if 'ParentNodeModel' not in _M_com.fastonz.fmserver.model.__dict__:
    _M_com.fastonz.fmserver.model.ParentNodeModel = Ice.createTempClass()
    class ParentNodeModel(object):
        def __init__(self, parentNodeID='', parentNodeName='', parentNodeCheckCode='', parentNodeSrvAddr='', parentStatus=0, result=0):
            self.parentNodeID = parentNodeID
            self.parentNodeName = parentNodeName
            self.parentNodeCheckCode = parentNodeCheckCode
            self.parentNodeSrvAddr = parentNodeSrvAddr
            self.parentStatus = parentStatus
            self.result = result

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.parentNodeID)
            _h = 5 * _h + Ice.getHash(self.parentNodeName)
            _h = 5 * _h + Ice.getHash(self.parentNodeCheckCode)
            _h = 5 * _h + Ice.getHash(self.parentNodeSrvAddr)
            _h = 5 * _h + Ice.getHash(self.parentStatus)
            _h = 5 * _h + Ice.getHash(self.result)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_com.fastonz.fmserver.model.ParentNodeModel):
                return NotImplemented
            else:
                if self.parentNodeID is None or other.parentNodeID is None:
                    if self.parentNodeID != other.parentNodeID:
                        return (-1 if self.parentNodeID is None else 1)
                else:
                    if self.parentNodeID < other.parentNodeID:
                        return -1
                    elif self.parentNodeID > other.parentNodeID:
                        return 1
                if self.parentNodeName is None or other.parentNodeName is None:
                    if self.parentNodeName != other.parentNodeName:
                        return (-1 if self.parentNodeName is None else 1)
                else:
                    if self.parentNodeName < other.parentNodeName:
                        return -1
                    elif self.parentNodeName > other.parentNodeName:
                        return 1
                if self.parentNodeCheckCode is None or other.parentNodeCheckCode is None:
                    if self.parentNodeCheckCode != other.parentNodeCheckCode:
                        return (-1 if self.parentNodeCheckCode is None else 1)
                else:
                    if self.parentNodeCheckCode < other.parentNodeCheckCode:
                        return -1
                    elif self.parentNodeCheckCode > other.parentNodeCheckCode:
                        return 1
                if self.parentNodeSrvAddr is None or other.parentNodeSrvAddr is None:
                    if self.parentNodeSrvAddr != other.parentNodeSrvAddr:
                        return (-1 if self.parentNodeSrvAddr is None else 1)
                else:
                    if self.parentNodeSrvAddr < other.parentNodeSrvAddr:
                        return -1
                    elif self.parentNodeSrvAddr > other.parentNodeSrvAddr:
                        return 1
                if self.parentStatus is None or other.parentStatus is None:
                    if self.parentStatus != other.parentStatus:
                        return (-1 if self.parentStatus is None else 1)
                else:
                    if self.parentStatus < other.parentStatus:
                        return -1
                    elif self.parentStatus > other.parentStatus:
                        return 1
                if self.result is None or other.result is None:
                    if self.result != other.result:
                        return (-1 if self.result is None else 1)
                else:
                    if self.result < other.result:
                        return -1
                    elif self.result > other.result:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_com.fastonz.fmserver.model._t_ParentNodeModel)

        __repr__ = __str__

    _M_com.fastonz.fmserver.model._t_ParentNodeModel = IcePy.defineStruct('::com::fastonz::fmserver::model::ParentNodeModel', ParentNodeModel, (), (
        ('parentNodeID', (), IcePy._t_string),
        ('parentNodeName', (), IcePy._t_string),
        ('parentNodeCheckCode', (), IcePy._t_string),
        ('parentNodeSrvAddr', (), IcePy._t_string),
        ('parentStatus', (), IcePy._t_int),
        ('result', (), IcePy._t_int)
    ))

    _M_com.fastonz.fmserver.model.ParentNodeModel = ParentNodeModel
    del ParentNodeModel

# End of module com.fastonz.fmserver.model

__name__ = 'com.fastonz.fmserver'

# End of module com.fastonz.fmserver

__name__ = 'com.fastonz'

# End of module com.fastonz

__name__ = 'com'

# End of module com
