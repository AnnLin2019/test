# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.5
#
# <auto-generated>
#
# Generated from file `ProServiceModel.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module com
_M_com = Ice.openModule('com')
__name__ = 'com'

# Start of module com.fastonz
_M_com.fastonz = Ice.openModule('com.fastonz')
__name__ = 'com.fastonz'

# Start of module com.fastonz.fmserver
_M_com.fastonz.fmserver = Ice.openModule('com.fastonz.fmserver')
__name__ = 'com.fastonz.fmserver'

# Start of module com.fastonz.fmserver.model
_M_com.fastonz.fmserver.model = Ice.openModule('com.fastonz.fmserver.model')
__name__ = 'com.fastonz.fmserver.model'

if 'ProServiceModel' not in _M_com.fastonz.fmserver.model.__dict__:
    _M_com.fastonz.fmserver.model.ProServiceModel = Ice.createTempClass()
    class ProServiceModel(object):
        def __init__(self, result=0, prodServicesName='', enableData='', enableAudio='', enableVideo='', enableMobile='', enableMultiVideo='', enableDualDisp='', wndMode='', audioBrdCount=0, videoBrdCount=0, videoRcvCountChair=0, videoRcvCountAttender=0, videoWidth=0, videoHeight=0, videoFrameRate=0, videoBitrate=0):
            self.result = result
            self.prodServicesName = prodServicesName
            self.enableData = enableData
            self.enableAudio = enableAudio
            self.enableVideo = enableVideo
            self.enableMobile = enableMobile
            self.enableMultiVideo = enableMultiVideo
            self.enableDualDisp = enableDualDisp
            self.wndMode = wndMode
            self.audioBrdCount = audioBrdCount
            self.videoBrdCount = videoBrdCount
            self.videoRcvCountChair = videoRcvCountChair
            self.videoRcvCountAttender = videoRcvCountAttender
            self.videoWidth = videoWidth
            self.videoHeight = videoHeight
            self.videoFrameRate = videoFrameRate
            self.videoBitrate = videoBitrate

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.result)
            _h = 5 * _h + Ice.getHash(self.prodServicesName)
            _h = 5 * _h + Ice.getHash(self.enableData)
            _h = 5 * _h + Ice.getHash(self.enableAudio)
            _h = 5 * _h + Ice.getHash(self.enableVideo)
            _h = 5 * _h + Ice.getHash(self.enableMobile)
            _h = 5 * _h + Ice.getHash(self.enableMultiVideo)
            _h = 5 * _h + Ice.getHash(self.enableDualDisp)
            _h = 5 * _h + Ice.getHash(self.wndMode)
            _h = 5 * _h + Ice.getHash(self.audioBrdCount)
            _h = 5 * _h + Ice.getHash(self.videoBrdCount)
            _h = 5 * _h + Ice.getHash(self.videoRcvCountChair)
            _h = 5 * _h + Ice.getHash(self.videoRcvCountAttender)
            _h = 5 * _h + Ice.getHash(self.videoWidth)
            _h = 5 * _h + Ice.getHash(self.videoHeight)
            _h = 5 * _h + Ice.getHash(self.videoFrameRate)
            _h = 5 * _h + Ice.getHash(self.videoBitrate)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_com.fastonz.fmserver.model.ProServiceModel):
                return NotImplemented
            else:
                if self.result is None or other.result is None:
                    if self.result != other.result:
                        return (-1 if self.result is None else 1)
                else:
                    if self.result < other.result:
                        return -1
                    elif self.result > other.result:
                        return 1
                if self.prodServicesName is None or other.prodServicesName is None:
                    if self.prodServicesName != other.prodServicesName:
                        return (-1 if self.prodServicesName is None else 1)
                else:
                    if self.prodServicesName < other.prodServicesName:
                        return -1
                    elif self.prodServicesName > other.prodServicesName:
                        return 1
                if self.enableData is None or other.enableData is None:
                    if self.enableData != other.enableData:
                        return (-1 if self.enableData is None else 1)
                else:
                    if self.enableData < other.enableData:
                        return -1
                    elif self.enableData > other.enableData:
                        return 1
                if self.enableAudio is None or other.enableAudio is None:
                    if self.enableAudio != other.enableAudio:
                        return (-1 if self.enableAudio is None else 1)
                else:
                    if self.enableAudio < other.enableAudio:
                        return -1
                    elif self.enableAudio > other.enableAudio:
                        return 1
                if self.enableVideo is None or other.enableVideo is None:
                    if self.enableVideo != other.enableVideo:
                        return (-1 if self.enableVideo is None else 1)
                else:
                    if self.enableVideo < other.enableVideo:
                        return -1
                    elif self.enableVideo > other.enableVideo:
                        return 1
                if self.enableMobile is None or other.enableMobile is None:
                    if self.enableMobile != other.enableMobile:
                        return (-1 if self.enableMobile is None else 1)
                else:
                    if self.enableMobile < other.enableMobile:
                        return -1
                    elif self.enableMobile > other.enableMobile:
                        return 1
                if self.enableMultiVideo is None or other.enableMultiVideo is None:
                    if self.enableMultiVideo != other.enableMultiVideo:
                        return (-1 if self.enableMultiVideo is None else 1)
                else:
                    if self.enableMultiVideo < other.enableMultiVideo:
                        return -1
                    elif self.enableMultiVideo > other.enableMultiVideo:
                        return 1
                if self.enableDualDisp is None or other.enableDualDisp is None:
                    if self.enableDualDisp != other.enableDualDisp:
                        return (-1 if self.enableDualDisp is None else 1)
                else:
                    if self.enableDualDisp < other.enableDualDisp:
                        return -1
                    elif self.enableDualDisp > other.enableDualDisp:
                        return 1
                if self.wndMode is None or other.wndMode is None:
                    if self.wndMode != other.wndMode:
                        return (-1 if self.wndMode is None else 1)
                else:
                    if self.wndMode < other.wndMode:
                        return -1
                    elif self.wndMode > other.wndMode:
                        return 1
                if self.audioBrdCount is None or other.audioBrdCount is None:
                    if self.audioBrdCount != other.audioBrdCount:
                        return (-1 if self.audioBrdCount is None else 1)
                else:
                    if self.audioBrdCount < other.audioBrdCount:
                        return -1
                    elif self.audioBrdCount > other.audioBrdCount:
                        return 1
                if self.videoBrdCount is None or other.videoBrdCount is None:
                    if self.videoBrdCount != other.videoBrdCount:
                        return (-1 if self.videoBrdCount is None else 1)
                else:
                    if self.videoBrdCount < other.videoBrdCount:
                        return -1
                    elif self.videoBrdCount > other.videoBrdCount:
                        return 1
                if self.videoRcvCountChair is None or other.videoRcvCountChair is None:
                    if self.videoRcvCountChair != other.videoRcvCountChair:
                        return (-1 if self.videoRcvCountChair is None else 1)
                else:
                    if self.videoRcvCountChair < other.videoRcvCountChair:
                        return -1
                    elif self.videoRcvCountChair > other.videoRcvCountChair:
                        return 1
                if self.videoRcvCountAttender is None or other.videoRcvCountAttender is None:
                    if self.videoRcvCountAttender != other.videoRcvCountAttender:
                        return (-1 if self.videoRcvCountAttender is None else 1)
                else:
                    if self.videoRcvCountAttender < other.videoRcvCountAttender:
                        return -1
                    elif self.videoRcvCountAttender > other.videoRcvCountAttender:
                        return 1
                if self.videoWidth is None or other.videoWidth is None:
                    if self.videoWidth != other.videoWidth:
                        return (-1 if self.videoWidth is None else 1)
                else:
                    if self.videoWidth < other.videoWidth:
                        return -1
                    elif self.videoWidth > other.videoWidth:
                        return 1
                if self.videoHeight is None or other.videoHeight is None:
                    if self.videoHeight != other.videoHeight:
                        return (-1 if self.videoHeight is None else 1)
                else:
                    if self.videoHeight < other.videoHeight:
                        return -1
                    elif self.videoHeight > other.videoHeight:
                        return 1
                if self.videoFrameRate is None or other.videoFrameRate is None:
                    if self.videoFrameRate != other.videoFrameRate:
                        return (-1 if self.videoFrameRate is None else 1)
                else:
                    if self.videoFrameRate < other.videoFrameRate:
                        return -1
                    elif self.videoFrameRate > other.videoFrameRate:
                        return 1
                if self.videoBitrate is None or other.videoBitrate is None:
                    if self.videoBitrate != other.videoBitrate:
                        return (-1 if self.videoBitrate is None else 1)
                else:
                    if self.videoBitrate < other.videoBitrate:
                        return -1
                    elif self.videoBitrate > other.videoBitrate:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_com.fastonz.fmserver.model._t_ProServiceModel)

        __repr__ = __str__

    _M_com.fastonz.fmserver.model._t_ProServiceModel = IcePy.defineStruct('::com::fastonz::fmserver::model::ProServiceModel', ProServiceModel, (), (
        ('result', (), IcePy._t_int),
        ('prodServicesName', (), IcePy._t_string),
        ('enableData', (), IcePy._t_string),
        ('enableAudio', (), IcePy._t_string),
        ('enableVideo', (), IcePy._t_string),
        ('enableMobile', (), IcePy._t_string),
        ('enableMultiVideo', (), IcePy._t_string),
        ('enableDualDisp', (), IcePy._t_string),
        ('wndMode', (), IcePy._t_string),
        ('audioBrdCount', (), IcePy._t_int),
        ('videoBrdCount', (), IcePy._t_int),
        ('videoRcvCountChair', (), IcePy._t_int),
        ('videoRcvCountAttender', (), IcePy._t_int),
        ('videoWidth', (), IcePy._t_int),
        ('videoHeight', (), IcePy._t_int),
        ('videoFrameRate', (), IcePy._t_int),
        ('videoBitrate', (), IcePy._t_int)
    ))

    _M_com.fastonz.fmserver.model.ProServiceModel = ProServiceModel
    del ProServiceModel

# End of module com.fastonz.fmserver.model

__name__ = 'com.fastonz.fmserver'

# End of module com.fastonz.fmserver

__name__ = 'com.fastonz'

# End of module com.fastonz

__name__ = 'com'

# End of module com
