# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.5
#
# <auto-generated>
#
# Generated from file `ProductFunctionModel.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module com
_M_com = Ice.openModule('com')
__name__ = 'com'

# Start of module com.fastonz
_M_com.fastonz = Ice.openModule('com.fastonz')
__name__ = 'com.fastonz'

# Start of module com.fastonz.fmserver
_M_com.fastonz.fmserver = Ice.openModule('com.fastonz.fmserver')
__name__ = 'com.fastonz.fmserver'

# Start of module com.fastonz.fmserver.model
_M_com.fastonz.fmserver.model = Ice.openModule('com.fastonz.fmserver.model')
__name__ = 'com.fastonz.fmserver.model'

if '_t_Attributes' not in _M_com.fastonz.fmserver.model.__dict__:
    _M_com.fastonz.fmserver.model._t_Attributes = IcePy.defineDictionary('::com::fastonz::fmserver::model::Attributes', (), IcePy._t_string, IcePy._t_string)

if 'ProductConf' not in _M_com.fastonz.fmserver.model.__dict__:
    _M_com.fastonz.fmserver.model.ProductConf = Ice.createTempClass()
    class ProductConf(object):
        def __init__(self, code='', value=''):
            self.code = code
            self.value = value

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.code)
            _h = 5 * _h + Ice.getHash(self.value)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_com.fastonz.fmserver.model.ProductConf):
                return NotImplemented
            else:
                if self.code is None or other.code is None:
                    if self.code != other.code:
                        return (-1 if self.code is None else 1)
                else:
                    if self.code < other.code:
                        return -1
                    elif self.code > other.code:
                        return 1
                if self.value is None or other.value is None:
                    if self.value != other.value:
                        return (-1 if self.value is None else 1)
                else:
                    if self.value < other.value:
                        return -1
                    elif self.value > other.value:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_com.fastonz.fmserver.model._t_ProductConf)

        __repr__ = __str__

    _M_com.fastonz.fmserver.model._t_ProductConf = IcePy.defineStruct('::com::fastonz::fmserver::model::ProductConf', ProductConf, (), (
        ('code', (), IcePy._t_string),
        ('value', (), IcePy._t_string)
    ))

    _M_com.fastonz.fmserver.model.ProductConf = ProductConf
    del ProductConf

if 'ProductFun' not in _M_com.fastonz.fmserver.model.__dict__:
    _M_com.fastonz.fmserver.model.ProductFun = Ice.createTempClass()
    class ProductFun(object):
        def __init__(self, code='', enable=False, parent='', attrs=None):
            self.code = code
            self.enable = enable
            self.parent = parent
            self.attrs = attrs

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_com.fastonz.fmserver.model.ProductFun):
                return NotImplemented
            else:
                if self.code != other.code:
                    return False
                if self.enable != other.enable:
                    return False
                if self.parent != other.parent:
                    return False
                if self.attrs != other.attrs:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_com.fastonz.fmserver.model._t_ProductFun)

        __repr__ = __str__

    _M_com.fastonz.fmserver.model._t_ProductFun = IcePy.defineStruct('::com::fastonz::fmserver::model::ProductFun', ProductFun, (), (
        ('code', (), IcePy._t_string),
        ('enable', (), IcePy._t_bool),
        ('parent', (), IcePy._t_string),
        ('attrs', (), _M_com.fastonz.fmserver.model._t_Attributes)
    ))

    _M_com.fastonz.fmserver.model.ProductFun = ProductFun
    del ProductFun

if '_t_ProductConfs' not in _M_com.fastonz.fmserver.model.__dict__:
    _M_com.fastonz.fmserver.model._t_ProductConfs = IcePy.defineSequence('::com::fastonz::fmserver::model::ProductConfs', (), _M_com.fastonz.fmserver.model._t_ProductConf)

if '_t_ProductFuns' not in _M_com.fastonz.fmserver.model.__dict__:
    _M_com.fastonz.fmserver.model._t_ProductFuns = IcePy.defineSequence('::com::fastonz::fmserver::model::ProductFuns', (), _M_com.fastonz.fmserver.model._t_ProductFun)

if 'ProductFunctionModel' not in _M_com.fastonz.fmserver.model.__dict__:
    _M_com.fastonz.fmserver.model.ProductFunctionModel = Ice.createTempClass()
    class ProductFunctionModel(object):
        def __init__(self, functions=None, configurations=None, productName='', version=0, result=0):
            self.functions = functions
            self.configurations = configurations
            self.productName = productName
            self.version = version
            self.result = result

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_com.fastonz.fmserver.model.ProductFunctionModel):
                return NotImplemented
            else:
                if self.functions != other.functions:
                    return False
                if self.configurations != other.configurations:
                    return False
                if self.productName != other.productName:
                    return False
                if self.version != other.version:
                    return False
                if self.result != other.result:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_com.fastonz.fmserver.model._t_ProductFunctionModel)

        __repr__ = __str__

    _M_com.fastonz.fmserver.model._t_ProductFunctionModel = IcePy.defineStruct('::com::fastonz::fmserver::model::ProductFunctionModel', ProductFunctionModel, (), (
        ('functions', (), _M_com.fastonz.fmserver.model._t_ProductFuns),
        ('configurations', (), _M_com.fastonz.fmserver.model._t_ProductConfs),
        ('productName', (), IcePy._t_string),
        ('version', (), IcePy._t_int),
        ('result', (), IcePy._t_int)
    ))

    _M_com.fastonz.fmserver.model.ProductFunctionModel = ProductFunctionModel
    del ProductFunctionModel

# End of module com.fastonz.fmserver.model

__name__ = 'com.fastonz.fmserver'

# End of module com.fastonz.fmserver

__name__ = 'com.fastonz'

# End of module com.fastonz

__name__ = 'com'

# End of module com
