# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.5
#
# <auto-generated>
#
# Generated from file `RoomDeptModel.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module com
_M_com = Ice.openModule('com')
__name__ = 'com'

# Start of module com.fastonz
_M_com.fastonz = Ice.openModule('com.fastonz')
__name__ = 'com.fastonz'

# Start of module com.fastonz.fmserver
_M_com.fastonz.fmserver = Ice.openModule('com.fastonz.fmserver')
__name__ = 'com.fastonz.fmserver'

# Start of module com.fastonz.fmserver.model
_M_com.fastonz.fmserver.model = Ice.openModule('com.fastonz.fmserver.model')
__name__ = 'com.fastonz.fmserver.model'

if 'RoomDeptModel' not in _M_com.fastonz.fmserver.model.__dict__:
    _M_com.fastonz.fmserver.model.RoomDeptModel = Ice.createTempClass()
    class RoomDeptModel(object):
        def __init__(self, depID=0, depName='', depType=0, parentDepID=0, nodeID=0, depth=0):
            self.depID = depID
            self.depName = depName
            self.depType = depType
            self.parentDepID = parentDepID
            self.nodeID = nodeID
            self.depth = depth

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.depID)
            _h = 5 * _h + Ice.getHash(self.depName)
            _h = 5 * _h + Ice.getHash(self.depType)
            _h = 5 * _h + Ice.getHash(self.parentDepID)
            _h = 5 * _h + Ice.getHash(self.nodeID)
            _h = 5 * _h + Ice.getHash(self.depth)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_com.fastonz.fmserver.model.RoomDeptModel):
                return NotImplemented
            else:
                if self.depID is None or other.depID is None:
                    if self.depID != other.depID:
                        return (-1 if self.depID is None else 1)
                else:
                    if self.depID < other.depID:
                        return -1
                    elif self.depID > other.depID:
                        return 1
                if self.depName is None or other.depName is None:
                    if self.depName != other.depName:
                        return (-1 if self.depName is None else 1)
                else:
                    if self.depName < other.depName:
                        return -1
                    elif self.depName > other.depName:
                        return 1
                if self.depType is None or other.depType is None:
                    if self.depType != other.depType:
                        return (-1 if self.depType is None else 1)
                else:
                    if self.depType < other.depType:
                        return -1
                    elif self.depType > other.depType:
                        return 1
                if self.parentDepID is None or other.parentDepID is None:
                    if self.parentDepID != other.parentDepID:
                        return (-1 if self.parentDepID is None else 1)
                else:
                    if self.parentDepID < other.parentDepID:
                        return -1
                    elif self.parentDepID > other.parentDepID:
                        return 1
                if self.nodeID is None or other.nodeID is None:
                    if self.nodeID != other.nodeID:
                        return (-1 if self.nodeID is None else 1)
                else:
                    if self.nodeID < other.nodeID:
                        return -1
                    elif self.nodeID > other.nodeID:
                        return 1
                if self.depth is None or other.depth is None:
                    if self.depth != other.depth:
                        return (-1 if self.depth is None else 1)
                else:
                    if self.depth < other.depth:
                        return -1
                    elif self.depth > other.depth:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_com.fastonz.fmserver.model._t_RoomDeptModel)

        __repr__ = __str__

    _M_com.fastonz.fmserver.model._t_RoomDeptModel = IcePy.defineStruct('::com::fastonz::fmserver::model::RoomDeptModel', RoomDeptModel, (), (
        ('depID', (), IcePy._t_int),
        ('depName', (), IcePy._t_string),
        ('depType', (), IcePy._t_int),
        ('parentDepID', (), IcePy._t_int),
        ('nodeID', (), IcePy._t_int),
        ('depth', (), IcePy._t_int)
    ))

    _M_com.fastonz.fmserver.model.RoomDeptModel = RoomDeptModel
    del RoomDeptModel

# End of module com.fastonz.fmserver.model

__name__ = 'com.fastonz.fmserver'

# End of module com.fastonz.fmserver

__name__ = 'com.fastonz'

# End of module com.fastonz

__name__ = 'com'

# End of module com
