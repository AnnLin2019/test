# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.5
#
# <auto-generated>
#
# Generated from file `RoomH323SettingsModel.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module com
_M_com = Ice.openModule('com')
__name__ = 'com'

# Start of module com.fastonz
_M_com.fastonz = Ice.openModule('com.fastonz')
__name__ = 'com.fastonz'

# Start of module com.fastonz.fmserver
_M_com.fastonz.fmserver = Ice.openModule('com.fastonz.fmserver')
__name__ = 'com.fastonz.fmserver'

# Start of module com.fastonz.fmserver.model
_M_com.fastonz.fmserver.model = Ice.openModule('com.fastonz.fmserver.model')
__name__ = 'com.fastonz.fmserver.model'

if 'RoomH323SettingsModel' not in _M_com.fastonz.fmserver.model.__dict__:
    _M_com.fastonz.fmserver.model.RoomH323SettingsModel = Ice.createTempClass()
    class RoomH323SettingsModel(object):
        def __init__(self, callBitrate=0, videoPushType=0, videoNum=0, encoderNum=0, maxRoomCount=0):
            self.callBitrate = callBitrate
            self.videoPushType = videoPushType
            self.videoNum = videoNum
            self.encoderNum = encoderNum
            self.maxRoomCount = maxRoomCount

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.callBitrate)
            _h = 5 * _h + Ice.getHash(self.videoPushType)
            _h = 5 * _h + Ice.getHash(self.videoNum)
            _h = 5 * _h + Ice.getHash(self.encoderNum)
            _h = 5 * _h + Ice.getHash(self.maxRoomCount)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_com.fastonz.fmserver.model.RoomH323SettingsModel):
                return NotImplemented
            else:
                if self.callBitrate is None or other.callBitrate is None:
                    if self.callBitrate != other.callBitrate:
                        return (-1 if self.callBitrate is None else 1)
                else:
                    if self.callBitrate < other.callBitrate:
                        return -1
                    elif self.callBitrate > other.callBitrate:
                        return 1
                if self.videoPushType is None or other.videoPushType is None:
                    if self.videoPushType != other.videoPushType:
                        return (-1 if self.videoPushType is None else 1)
                else:
                    if self.videoPushType < other.videoPushType:
                        return -1
                    elif self.videoPushType > other.videoPushType:
                        return 1
                if self.videoNum is None or other.videoNum is None:
                    if self.videoNum != other.videoNum:
                        return (-1 if self.videoNum is None else 1)
                else:
                    if self.videoNum < other.videoNum:
                        return -1
                    elif self.videoNum > other.videoNum:
                        return 1
                if self.encoderNum is None or other.encoderNum is None:
                    if self.encoderNum != other.encoderNum:
                        return (-1 if self.encoderNum is None else 1)
                else:
                    if self.encoderNum < other.encoderNum:
                        return -1
                    elif self.encoderNum > other.encoderNum:
                        return 1
                if self.maxRoomCount is None or other.maxRoomCount is None:
                    if self.maxRoomCount != other.maxRoomCount:
                        return (-1 if self.maxRoomCount is None else 1)
                else:
                    if self.maxRoomCount < other.maxRoomCount:
                        return -1
                    elif self.maxRoomCount > other.maxRoomCount:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_com.fastonz.fmserver.model._t_RoomH323SettingsModel)

        __repr__ = __str__

    _M_com.fastonz.fmserver.model._t_RoomH323SettingsModel = IcePy.defineStruct('::com::fastonz::fmserver::model::RoomH323SettingsModel', RoomH323SettingsModel, (), (
        ('callBitrate', (), IcePy._t_int),
        ('videoPushType', (), IcePy._t_int),
        ('videoNum', (), IcePy._t_int),
        ('encoderNum', (), IcePy._t_int),
        ('maxRoomCount', (), IcePy._t_int)
    ))

    _M_com.fastonz.fmserver.model.RoomH323SettingsModel = RoomH323SettingsModel
    del RoomH323SettingsModel

# End of module com.fastonz.fmserver.model

__name__ = 'com.fastonz.fmserver'

# End of module com.fastonz.fmserver

__name__ = 'com.fastonz'

# End of module com.fastonz

__name__ = 'com'

# End of module com
