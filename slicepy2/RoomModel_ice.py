# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.5
#
# <auto-generated>
#
# Generated from file `RoomModel.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module com
_M_com = Ice.openModule('com')
__name__ = 'com'

# Start of module com.fastonz
_M_com.fastonz = Ice.openModule('com.fastonz')
__name__ = 'com.fastonz'

# Start of module com.fastonz.fmserver
_M_com.fastonz.fmserver = Ice.openModule('com.fastonz.fmserver')
__name__ = 'com.fastonz.fmserver'

# Start of module com.fastonz.fmserver.model
_M_com.fastonz.fmserver.model = Ice.openModule('com.fastonz.fmserver.model')
__name__ = 'com.fastonz.fmserver.model'

if 'RoomModel' not in _M_com.fastonz.fmserver.model.__dict__:
    _M_com.fastonz.fmserver.model.RoomModel = Ice.createTempClass()
    class RoomModel(object):
        def __init__(self, roomID=0, roomType='', roomAppID=0, roomName='', maxUserCount=0, curUserCount=0, currentServiceID=0, verifyMode='', hopeStartTime='', hopeEndTime='', roomDesc=''):
            self.roomID = roomID
            self.roomType = roomType
            self.roomAppID = roomAppID
            self.roomName = roomName
            self.maxUserCount = maxUserCount
            self.curUserCount = curUserCount
            self.currentServiceID = currentServiceID
            self.verifyMode = verifyMode
            self.hopeStartTime = hopeStartTime
            self.hopeEndTime = hopeEndTime
            self.roomDesc = roomDesc

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.roomID)
            _h = 5 * _h + Ice.getHash(self.roomType)
            _h = 5 * _h + Ice.getHash(self.roomAppID)
            _h = 5 * _h + Ice.getHash(self.roomName)
            _h = 5 * _h + Ice.getHash(self.maxUserCount)
            _h = 5 * _h + Ice.getHash(self.curUserCount)
            _h = 5 * _h + Ice.getHash(self.currentServiceID)
            _h = 5 * _h + Ice.getHash(self.verifyMode)
            _h = 5 * _h + Ice.getHash(self.hopeStartTime)
            _h = 5 * _h + Ice.getHash(self.hopeEndTime)
            _h = 5 * _h + Ice.getHash(self.roomDesc)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_com.fastonz.fmserver.model.RoomModel):
                return NotImplemented
            else:
                if self.roomID is None or other.roomID is None:
                    if self.roomID != other.roomID:
                        return (-1 if self.roomID is None else 1)
                else:
                    if self.roomID < other.roomID:
                        return -1
                    elif self.roomID > other.roomID:
                        return 1
                if self.roomType is None or other.roomType is None:
                    if self.roomType != other.roomType:
                        return (-1 if self.roomType is None else 1)
                else:
                    if self.roomType < other.roomType:
                        return -1
                    elif self.roomType > other.roomType:
                        return 1
                if self.roomAppID is None or other.roomAppID is None:
                    if self.roomAppID != other.roomAppID:
                        return (-1 if self.roomAppID is None else 1)
                else:
                    if self.roomAppID < other.roomAppID:
                        return -1
                    elif self.roomAppID > other.roomAppID:
                        return 1
                if self.roomName is None or other.roomName is None:
                    if self.roomName != other.roomName:
                        return (-1 if self.roomName is None else 1)
                else:
                    if self.roomName < other.roomName:
                        return -1
                    elif self.roomName > other.roomName:
                        return 1
                if self.maxUserCount is None or other.maxUserCount is None:
                    if self.maxUserCount != other.maxUserCount:
                        return (-1 if self.maxUserCount is None else 1)
                else:
                    if self.maxUserCount < other.maxUserCount:
                        return -1
                    elif self.maxUserCount > other.maxUserCount:
                        return 1
                if self.curUserCount is None or other.curUserCount is None:
                    if self.curUserCount != other.curUserCount:
                        return (-1 if self.curUserCount is None else 1)
                else:
                    if self.curUserCount < other.curUserCount:
                        return -1
                    elif self.curUserCount > other.curUserCount:
                        return 1
                if self.currentServiceID is None or other.currentServiceID is None:
                    if self.currentServiceID != other.currentServiceID:
                        return (-1 if self.currentServiceID is None else 1)
                else:
                    if self.currentServiceID < other.currentServiceID:
                        return -1
                    elif self.currentServiceID > other.currentServiceID:
                        return 1
                if self.verifyMode is None or other.verifyMode is None:
                    if self.verifyMode != other.verifyMode:
                        return (-1 if self.verifyMode is None else 1)
                else:
                    if self.verifyMode < other.verifyMode:
                        return -1
                    elif self.verifyMode > other.verifyMode:
                        return 1
                if self.hopeStartTime is None or other.hopeStartTime is None:
                    if self.hopeStartTime != other.hopeStartTime:
                        return (-1 if self.hopeStartTime is None else 1)
                else:
                    if self.hopeStartTime < other.hopeStartTime:
                        return -1
                    elif self.hopeStartTime > other.hopeStartTime:
                        return 1
                if self.hopeEndTime is None or other.hopeEndTime is None:
                    if self.hopeEndTime != other.hopeEndTime:
                        return (-1 if self.hopeEndTime is None else 1)
                else:
                    if self.hopeEndTime < other.hopeEndTime:
                        return -1
                    elif self.hopeEndTime > other.hopeEndTime:
                        return 1
                if self.roomDesc is None or other.roomDesc is None:
                    if self.roomDesc != other.roomDesc:
                        return (-1 if self.roomDesc is None else 1)
                else:
                    if self.roomDesc < other.roomDesc:
                        return -1
                    elif self.roomDesc > other.roomDesc:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_com.fastonz.fmserver.model._t_RoomModel)

        __repr__ = __str__

    _M_com.fastonz.fmserver.model._t_RoomModel = IcePy.defineStruct('::com::fastonz::fmserver::model::RoomModel', RoomModel, (), (
        ('roomID', (), IcePy._t_int),
        ('roomType', (), IcePy._t_string),
        ('roomAppID', (), IcePy._t_int),
        ('roomName', (), IcePy._t_string),
        ('maxUserCount', (), IcePy._t_int),
        ('curUserCount', (), IcePy._t_int),
        ('currentServiceID', (), IcePy._t_int),
        ('verifyMode', (), IcePy._t_string),
        ('hopeStartTime', (), IcePy._t_string),
        ('hopeEndTime', (), IcePy._t_string),
        ('roomDesc', (), IcePy._t_string)
    ))

    _M_com.fastonz.fmserver.model.RoomModel = RoomModel
    del RoomModel

# End of module com.fastonz.fmserver.model

__name__ = 'com.fastonz.fmserver'

# End of module com.fastonz.fmserver

__name__ = 'com.fastonz'

# End of module com.fastonz

__name__ = 'com'

# End of module com
