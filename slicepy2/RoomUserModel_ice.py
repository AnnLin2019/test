# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.5
#
# <auto-generated>
#
# Generated from file `RoomUserModel.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module com
_M_com = Ice.openModule('com')
__name__ = 'com'

# Start of module com.fastonz
_M_com.fastonz = Ice.openModule('com.fastonz')
__name__ = 'com.fastonz'

# Start of module com.fastonz.fmserver
_M_com.fastonz.fmserver = Ice.openModule('com.fastonz.fmserver')
__name__ = 'com.fastonz.fmserver'

# Start of module com.fastonz.fmserver.model
_M_com.fastonz.fmserver.model = Ice.openModule('com.fastonz.fmserver.model')
__name__ = 'com.fastonz.fmserver.model'

if 'RoomUserModel' not in _M_com.fastonz.fmserver.model.__dict__:
    _M_com.fastonz.fmserver.model.RoomUserModel = Ice.createTempClass()
    class RoomUserModel(object):
        def __init__(self, userID=0, userName='', displayName='', userRight='', userLevel='', seatList=0, nodeID=0, adminRole='', depID=0, sex='', telePhone='', mobile='', eMail=''):
            self.userID = userID
            self.userName = userName
            self.displayName = displayName
            self.userRight = userRight
            self.userLevel = userLevel
            self.seatList = seatList
            self.nodeID = nodeID
            self.adminRole = adminRole
            self.depID = depID
            self.sex = sex
            self.telePhone = telePhone
            self.mobile = mobile
            self.eMail = eMail

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.userID)
            _h = 5 * _h + Ice.getHash(self.userName)
            _h = 5 * _h + Ice.getHash(self.displayName)
            _h = 5 * _h + Ice.getHash(self.userRight)
            _h = 5 * _h + Ice.getHash(self.userLevel)
            _h = 5 * _h + Ice.getHash(self.seatList)
            _h = 5 * _h + Ice.getHash(self.nodeID)
            _h = 5 * _h + Ice.getHash(self.adminRole)
            _h = 5 * _h + Ice.getHash(self.depID)
            _h = 5 * _h + Ice.getHash(self.sex)
            _h = 5 * _h + Ice.getHash(self.telePhone)
            _h = 5 * _h + Ice.getHash(self.mobile)
            _h = 5 * _h + Ice.getHash(self.eMail)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_com.fastonz.fmserver.model.RoomUserModel):
                return NotImplemented
            else:
                if self.userID is None or other.userID is None:
                    if self.userID != other.userID:
                        return (-1 if self.userID is None else 1)
                else:
                    if self.userID < other.userID:
                        return -1
                    elif self.userID > other.userID:
                        return 1
                if self.userName is None or other.userName is None:
                    if self.userName != other.userName:
                        return (-1 if self.userName is None else 1)
                else:
                    if self.userName < other.userName:
                        return -1
                    elif self.userName > other.userName:
                        return 1
                if self.displayName is None or other.displayName is None:
                    if self.displayName != other.displayName:
                        return (-1 if self.displayName is None else 1)
                else:
                    if self.displayName < other.displayName:
                        return -1
                    elif self.displayName > other.displayName:
                        return 1
                if self.userRight is None or other.userRight is None:
                    if self.userRight != other.userRight:
                        return (-1 if self.userRight is None else 1)
                else:
                    if self.userRight < other.userRight:
                        return -1
                    elif self.userRight > other.userRight:
                        return 1
                if self.userLevel is None or other.userLevel is None:
                    if self.userLevel != other.userLevel:
                        return (-1 if self.userLevel is None else 1)
                else:
                    if self.userLevel < other.userLevel:
                        return -1
                    elif self.userLevel > other.userLevel:
                        return 1
                if self.seatList is None or other.seatList is None:
                    if self.seatList != other.seatList:
                        return (-1 if self.seatList is None else 1)
                else:
                    if self.seatList < other.seatList:
                        return -1
                    elif self.seatList > other.seatList:
                        return 1
                if self.nodeID is None or other.nodeID is None:
                    if self.nodeID != other.nodeID:
                        return (-1 if self.nodeID is None else 1)
                else:
                    if self.nodeID < other.nodeID:
                        return -1
                    elif self.nodeID > other.nodeID:
                        return 1
                if self.adminRole is None or other.adminRole is None:
                    if self.adminRole != other.adminRole:
                        return (-1 if self.adminRole is None else 1)
                else:
                    if self.adminRole < other.adminRole:
                        return -1
                    elif self.adminRole > other.adminRole:
                        return 1
                if self.depID is None or other.depID is None:
                    if self.depID != other.depID:
                        return (-1 if self.depID is None else 1)
                else:
                    if self.depID < other.depID:
                        return -1
                    elif self.depID > other.depID:
                        return 1
                if self.sex is None or other.sex is None:
                    if self.sex != other.sex:
                        return (-1 if self.sex is None else 1)
                else:
                    if self.sex < other.sex:
                        return -1
                    elif self.sex > other.sex:
                        return 1
                if self.telePhone is None or other.telePhone is None:
                    if self.telePhone != other.telePhone:
                        return (-1 if self.telePhone is None else 1)
                else:
                    if self.telePhone < other.telePhone:
                        return -1
                    elif self.telePhone > other.telePhone:
                        return 1
                if self.mobile is None or other.mobile is None:
                    if self.mobile != other.mobile:
                        return (-1 if self.mobile is None else 1)
                else:
                    if self.mobile < other.mobile:
                        return -1
                    elif self.mobile > other.mobile:
                        return 1
                if self.eMail is None or other.eMail is None:
                    if self.eMail != other.eMail:
                        return (-1 if self.eMail is None else 1)
                else:
                    if self.eMail < other.eMail:
                        return -1
                    elif self.eMail > other.eMail:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_com.fastonz.fmserver.model._t_RoomUserModel)

        __repr__ = __str__

    _M_com.fastonz.fmserver.model._t_RoomUserModel = IcePy.defineStruct('::com::fastonz::fmserver::model::RoomUserModel', RoomUserModel, (), (
        ('userID', (), IcePy._t_int),
        ('userName', (), IcePy._t_string),
        ('displayName', (), IcePy._t_string),
        ('userRight', (), IcePy._t_string),
        ('userLevel', (), IcePy._t_string),
        ('seatList', (), IcePy._t_int),
        ('nodeID', (), IcePy._t_int),
        ('adminRole', (), IcePy._t_string),
        ('depID', (), IcePy._t_int),
        ('sex', (), IcePy._t_string),
        ('telePhone', (), IcePy._t_string),
        ('mobile', (), IcePy._t_string),
        ('eMail', (), IcePy._t_string)
    ))

    _M_com.fastonz.fmserver.model.RoomUserModel = RoomUserModel
    del RoomUserModel

# End of module com.fastonz.fmserver.model

__name__ = 'com.fastonz.fmserver'

# End of module com.fastonz.fmserver

__name__ = 'com.fastonz'

# End of module com.fastonz

__name__ = 'com'

# End of module com
